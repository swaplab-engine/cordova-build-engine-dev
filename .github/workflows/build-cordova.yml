name: Cordova Build (Debug/Release APK/AAB)

on:
  repository_dispatch:
    types: [trigger-build]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: ${{ github.event.client_payload.timeoutMinutes || 8 }}

    steps:
      - name: Record start time
        run: echo "start_time=$(date +%s)" >> $GITHUB_ENV

      # ===============================================================
      # LANGKAH 1: LAPORKAN BAHWA BUILD SUDAH DIMULAI (IN_PROGRESS)
      # ===============================================================
      - name: Report Build In Progress
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            -d '{
              "buildId": "${{ github.event.client_payload.buildId }}",
              "userId": "${{ github.event.client_payload.userId }}",
              "status": "in_progress"
            }' \
            "${{ github.event.client_payload.appBaseUrl }}/api/github-webhook"

      # ===============================================================
      # LANGKAH 2: SETUP LINGKUNGAN BUILD (Node, Java, Cache)
      # ===============================================================
      - name: Set up Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up JDK 17 and Gradle
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache global npm packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-global-v2

      - name: Install Cordova CLI
        run: npm install -g cordova

      # ===============================================================
      # LANGKAH 3: PROSES BUILD
      # ===============================================================
      - name: Download and Unzip Project
        run: |
          ZIP_URL="${{ github.event.client_payload.projectUrl }}"
          curl -L -o cordovaProject.zip "$ZIP_URL"
          mkdir cordova-project
          unzip cordovaProject.zip -d cordova-project

      - name: Prepare Signing Configuration
        if: ${{ startsWith(github.event.client_payload.buildType, 'release') }}
        run: |
          cd cordova-project
          KEYSTORE_URL="${{ github.event.client_payload.keystoreUrl }}"
          curl -L -o release.jks "$KEYSTORE_URL"
          PACKAGE_TYPE="apk"
          if [[ "${{ github.event.client_payload.buildType }}" == "release-aab" ]]; then
            PACKAGE_TYPE="bundle"
          fi
          cat > build.json << EOF
          { "android": { "release": { "keystore": "release.jks", "storePassword": "${{ github.event.client_payload.keystorePassword }}", "alias": "${{ github.event.client_payload.keyAlias }}", "password": "${{ github.event.client_payload.keyPassword }}", "packageType": "$PACKAGE_TYPE" } } }
          EOF

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('cordova-project/**/gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Install Dependencies and Build Project
        run: |
          cd cordova-project
          npm install
          cordova platform add android
          if [[ "${{ github.event.client_payload.buildType }}" == "debug-apk" ]]; then
            cordova build android --debug -- --gradleArg=--no-daemon
          else
            cordova build android --release --buildConfig=build.json -- --gradleArg=--no-daemon
          fi

      # ===============================================================
      # LANGKAH 4: JIKA BUILD BERHASIL, UPLOAD & LAPORKAN
      # ===============================================================
      - name: Upload Build File and Report Success
        if: success()
        run: |
          BUILD_TYPE="${{ github.event.client_payload.buildType }}"
          USER_ID="${{ github.event.client_payload.userId }}"
          APP_BASE_URL="${{ github.event.client_payload.appBaseUrl }}"
          
          # Cari file hasil build
          ARTIFACT_PATH=""
          if [[ "$BUILD_TYPE" == "release-aab" ]]; then
            ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/bundle/release -name "*.aab" | head -n 1)
          elif [[ "$BUILD_TYPE" == "release-apk" ]]; then
            ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
          else # debug-apk
            ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/apk/debug -name "*.apk" | head -n 1)
          fi
          
          if [ -z "$ARTIFACT_PATH" ]; then
            echo "::error::Build artifact not found!"
            exit 1
          fi

          # Upload file ke server
          UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -F "buildFile=@$ARTIFACT_PATH" \
            -F "buildId=${{ github.event.client_payload.buildId }}" \
            -F "buildType=$BUILD_TYPE" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            "$APP_BASE_URL/upload-result/$USER_ID")
          
          HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
          DOWNLOAD_URL=$(echo "$UPLOAD_RESPONSE" | sed '$d')

          if [[ "$HTTP_CODE" != "200" ]]; then
            echo "::error::Gagal mengupload file hasil build. Server merespons dengan kode $HTTP_CODE"
            exit 1
          fi

          # Hitung durasi
          end_time=$(date +%s)
          duration=$((end_time - start_time))

          # Laporkan sukses ke server
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            -d '{
              "buildId": "${{ github.event.client_payload.buildId }}",
              "userId": "$USER_ID",
              "status": "complete",
              "durationSeconds": "'"$duration"'",
              "downloadUrl": "'"$DOWNLOAD_URL"'"
            }' \
            "$APP_BASE_URL/api/github-webhook"

      # ===============================================================
      # LANGKAH 5: JIKA BUILD GAGAL, UPLOAD LOG & LAPORKAN
      # ===============================================================
      - name: Upload Log File and Report Failure
        if: failure()
        run: |
          USER_ID="${{ github.event.client_payload.userId }}"
          APP_BASE_URL="${{ github.event.client_payload.appBaseUrl }}"
          BUILD_ID="${{ github.event.client_payload.buildId }}"

          # Buat file log dummy jika tidak ada
          if [ ! -f "build_log.txt" ]; then
            echo "Build gagal pada tahap awal sebelum log dibuat." > build_log.txt
          fi

          # Upload file log ke server
          UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -F "logFile=@build_log.txt" \
            -F "buildId=$BUILD_ID" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            "$APP_BASE_URL/upload-log/$USER_ID")
          
          HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
          LOG_URL=$(echo "$UPLOAD_RESPONSE" | sed '$d')

          if [[ "$HTTP_CODE" != "200" ]]; then
            LOG_URL="" # Gagal upload, kirim URL kosong
          fi

          # Hitung durasi
          end_time=$(date +%s)
          duration=$((end_time - start_time))

          # Laporkan kegagalan ke server
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            -d '{
              "buildId": "$BUILD_ID",
              "userId": "$USER_ID",
              "status": "failed",
              "durationSeconds": "'"$duration"'",
              "logUrl": "'"$LOG_URL"'"
            }' \
            "$APP_BASE_URL/api/github-webhook"
