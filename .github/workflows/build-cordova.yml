name: Cordova Build (Debug/Release APK/AAB)

on:
  repository_dispatch:
    types: [trigger-build]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Dump client_payload to log
        run: echo "${{ toJSON(github.event.client_payload) }}"

      # 1. Hapus 'cache: npm' dari sini karena package-lock.json belum ada
      - name: Set up Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. Tambahkan cache manual untuk paket global npm (seperti cordova)
      - name: Cache global npm packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-global-${{ hashFiles('**/package-lock.json') }} # Kunci ini mungkin tidak ideal, tapi cukup
          restore-keys: |
            ${{ runner.os }}-npm-global-

      - name: Install Cordova CLI
        run: npm install -g cordova

      - name: Download and Unzip Project
        run: |
          ZIP_URL="${{ github.event.client_payload.projectUrl }}"
          curl -L -o cordovaProject.zip "$ZIP_URL"
          mkdir cordova-project
          unzip cordovaProject.zip -d cordova-project

      # 3. Tambahkan cache manual untuk node_modules proyek SETELAH diunduh
      - name: Cache project dependencies (node_modules)
        uses: actions/cache@v4
        with:
          path: cordova-project/node_modules
          key: ${{ runner.os }}-npm-project-${{ hashFiles('cordova-project/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-project-

      - name: Prepare Signing Configuration (build.json)
        run: |
          cd cordova-project
          KEYSTORE_URL="${{ github.event.client_payload.keystoreUrl }}"
          curl -L -o release.jks "$KEYSTORE_URL"
          PACKAGE_TYPE="apk"
          if [[ "${{ github.event.client_payload.buildType }}" == "release-aab" ]]; then
            PACKAGE_TYPE="bundle"
          fi
          cat > build.json << EOF
          {
            "android": { "release": { "keystore": "release.jks", "storePassword": "${{ github.event.client_payload.keystorePassword }}", "alias": "${{ github.event.client_payload.keyAlias }}", "password": "${{ github.event.client_payload.keyPassword }}", "packageType": "$PACKAGE_TYPE" } }
          }
          EOF

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('cordova-project/**/*.gradle*', 'cordova-project/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Cordova Project
        run: |
          cd cordova-project
          # 'npm install' akan sangat cepat jika cache di atas berhasil
          npm install
          cordova platform add android
          cordova build android --release --buildConfig=build.json -- --gradleArg=--no-daemon

      - name: Upload Build File to Your Server
        run: |
          BUILD_TYPE="${{ github.event.client_payload.buildType }}"
          USER_ID="${{ github.event.client_payload.userId }}"
          ARTIFACT_PATH=""
          if [[ "$BUILD_TYPE" == "release-aab" ]]; then
            ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/bundle/release -name "*.aab" | head -n 1)
          else
            ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
          fi
          if [ -z "$ARTIFACT_PATH" ]; then
            echo "::error::Build artifact not found!"
            exit 1
          fi
          curl -X POST \
            -F "buildFile=@$ARTIFACT_PATH" \
            -F "buildId=${{ github.event.client_payload.buildId }}" \
            -F "buildType=$BUILD_TYPE" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            https://cordova.build.appjs.net/upload-result/$USER_ID

      - name: Notify Server of Failure
        if: failure()
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{ "buildId": "${{ github.event.client_payload.buildId }}", "errorUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}", "secret": "${{ secrets.WEBHOOK_SECRET }}" }' \
            https://cordova.build.appjs.net/build-failed
