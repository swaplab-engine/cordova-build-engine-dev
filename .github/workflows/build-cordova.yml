name: Capacitor Android Build (Debug/Release APK/AAB)

on:
  repository_dispatch:
    types: [trigger-build]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    # timeout diambil dari client_payload (menit)
    timeout-minutes: ${{ github.event.client_payload.timeoutMinutes }}

    env:
      DEFAULT_GRADLE_VERSION: "8.7.0"

    steps:
      - name: Dump client_payload to log
        run: echo "${{ toJSON(github.event.client_payload) }}"

      - name: Set up Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache global npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-global-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-global-

      - name: Download and Unzip Project
        run: |
          ZIP_URL="${{ github.event.client_payload.projectUrl }}"
          if [ -z "$ZIP_URL" ]; then
            echo "::error::projectUrl tidak diberikan di client_payload"
            exit 1
          fi
          curl -L -o project.zip "$ZIP_URL"
          mkdir -p app
          unzip -q project.zip -d app

      - name: Cache project node_modules
        uses: actions/cache@v4
        with:
          path: app/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('app/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install project dependencies
        working-directory: app
        run: |
          echo "Installing project dependencies..."
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build web assets (if present) and ensure Capacitor deps
        working-directory: app
        run: |
          npm run build --if-present

          # Pastikan Capacitor CLI tersedia (prefer local)
          if ! node -e "require('fs').existsSync('node_modules/@capacitor/cli')" 2>/dev/null; then
            npm install --no-audit --no-fund --save-dev @capacitor/cli @capacitor/core @capacitor/android
          fi

      - name: Add / Sync Android native project
        working-directory: app
        run: |
          if [ ! -d "./android" ]; then
            echo "Android native not found -> npx cap add android"
            npx cap add android
          fi
          echo "Syncing Capacitor (copy web + plugins)..."
          npx cap sync android
          ls -la android || true

      - name: Lock Gradle Wrapper Version (CI-only)
        working-directory: app
        run: |
          set -e
          GRADLE_VERSION="${{ github.event.client_payload.gradleVersion || env.DEFAULT_GRADLE_VERSION }}"
          PROPERTIES_FILE="android/gradle/wrapper/gradle-wrapper.properties"

          if [ -f "$PROPERTIES_FILE" ]; then
            echo "Setting Gradle distribution to $GRADLE_VERSION in $PROPERTIES_FILE (CI-only change)"
            # kompatibel dengan sed pada ubuntu runner
            sed -i.bak -E "s|distributionUrl=.*|distributionUrl=https\\://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-all.zip|g" "$PROPERTIES_FILE"
            echo "Updated gradle-wrapper.properties:"
            grep distributionUrl "$PROPERTIES_FILE" || true
          else
            echo "gradle-wrapper.properties tidak ditemukan (skip lock). Jika android dibuat nanti, wrapper akan dibuat."
          fi

      - name: Cache Gradle wrapper & Gradle caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            app/android/.gradle
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('app/package-lock.json', 'app/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-

      - name: Cache Maven repo and Android local cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.android/build-cache
          key: ${{ runner.os }}-maven-android-${{ hashFiles('app/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-maven-android-

      - name: Prepare Signing Keystore (release builds only)
        working-directory: app
        run: |
          set -e
          # normalisasi buildType di shell
          BUILD_RAW="${{ github.event.client_payload.buildType || 'debug' }}"
          BUILD_TYPE=$(echo "$BUILD_RAW" | tr '[:upper:]' '[:lower:]' | tr -d ' ')
          echo "Normalized build type for keystore step: $BUILD_TYPE"

          # hanya jalankan download kalau tipe release
          case "$BUILD_TYPE" in
            *release*)
              KEYSTORE_URL="${{ github.event.client_payload.keystoreUrl || '' }}"
              if [ -z "$KEYSTORE_URL" ]; then
                echo "::error::Keystore URL not provided but buildType indicates release. Provide client_payload.keystoreUrl"
                exit 1
              fi
              cd android
              echo "Downloading keystore..."
              curl -L -o release.jks "$KEYSTORE_URL"
              chmod 600 release.jks
              cd ..
              ;;
            *)
              echo "Non-release build -> skip keystore download."
              ;;
          esac

      - name: Build Android (Gradle)
        working-directory: app
        run: |
          set -e
          cd android
          chmod +x ./gradlew || true

          BUILD_RAW="${{ github.event.client_payload.buildType || 'debug' }}"
          BUILD_TYPE=$(echo "$BUILD_RAW" | tr '[:upper:]' '[:lower:]' | tr -d ' ')
          echo "Normalized build type: $BUILD_TYPE"

          LOG_FILE="$(pwd)/build_log.txt"
          echo "Gradle output will be saved to: $LOG_FILE"

          # debug builds
          if [[ "$BUILD_TYPE" == debug* ]]; then
            echo "Running debug build (assembleDebug)..."
            ./gradlew assembleDebug --no-daemon > "$LOG_FILE" 2>&1 || (tail -n 200 "$LOG_FILE" && exit 1)
            exit 0
          fi

          # release builds
          if [[ "$BUILD_TYPE" == *release* ]]; then
            if [ ! -f "./release.jks" ]; then
              echo "::error::release.jks not found in android/ â€” ensure keystore was downloaded or provide keystoreUrl in payload"
              [ -f "$LOG_FILE" ] && tail -n 200 "$LOG_FILE" || true
              exit 1
            fi

            STORE="./release.jks"
            STORE_PASS="${{ github.event.client_payload.keystorePassword || '' }}"
            KEY_ALIAS="${{ github.event.client_payload.keyAlias || '' }}"
            KEY_PASS="${{ github.event.client_payload.keyPassword || '' }}"

            if [[ "$BUILD_TYPE" == *aab* || "$BUILD_TYPE" == *bundle* ]]; then
              echo "Building AAB (bundleRelease)..."
              ./gradlew bundleRelease --no-daemon \
                -Pandroid.injected.signing.store.file="$STORE" \
                -Pandroid.injected.signing.store.password="$STORE_PASS" \
                -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
                -Pandroid.injected.signing.key.password="$KEY_PASS" > "$LOG_FILE" 2>&1 || (tail -n 200 "$LOG_FILE" && exit 1)
            else
              echo "Building Release APK (assembleRelease)..."
              ./gradlew assembleRelease --no-daemon \
                -Pandroid.injected.signing.store.file="$STORE" \
                -Pandroid.injected.signing.store.password="$STORE_PASS" \
                -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
                -Pandroid.injected.signing.key.password="$KEY_PASS" > "$LOG_FILE" 2>&1 || (tail -n 200 "$LOG_FILE" && exit 1)
            fi
            exit 0
          fi

          echo "::error::Unknown buildType: $BUILD_RAW"
          exit 1

      - name: Upload Build File to Your Server
        if: success()
        run: |
          BUILD_RAW="${{ github.event.client_payload.buildType || 'debug' }}"
          BUILD_TYPE=$(echo "$BUILD_RAW" | tr '[:upper:]' '[:lower:]' | tr -d ' ')
          USER_ID="${{ github.event.client_payload.userId }}"
          ARTIFACT_PATH=""

          if [[ "$BUILD_TYPE" == *aab* || "$BUILD_TYPE" == *bundle* ]]; then
            ARTIFACT_PATH=$(find app/android/app/build/outputs/bundle/release -name "*.aab" | head -n 1)
          elif [[ "$BUILD_TYPE" == debug* ]]; then
            ARTIFACT_PATH=$(find app/android/app/build/outputs/apk/debug -name "*.apk" | head -n 1)
          else
            ARTIFACT_PATH=$(find app/android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
          fi

          if [ -z "$ARTIFACT_PATH" ]; then
            echo "::error::Build artifact not found!"
            exit 1
          fi

          echo "Uploading $ARTIFACT_PATH ..."
          curl -X POST \
            -F "buildFile=@$ARTIFACT_PATH" \
            -F "buildId=${{ github.event.client_payload.buildId }}" \
            -F "buildType=$BUILD_RAW" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            https://cordova.build.appjs.net/upload-result/$USER_ID

      - name: Filter and Upload Error Log
        if: failure()
        run: |
          USER_ID="${{ github.event.client_payload.userId }}"
          LOG_FILE=""

          if [ -f "app/android/build_log.txt" ]; then
            LOG_FILE="app/android/build_log.txt"
          else
            # cari file log lain di android
            FOUND=$(find app/android -type f -name "*.log" | head -n 1 || true)
            if [ -n "$FOUND" ]; then
              LOG_FILE="$FOUND"
            elif [ -f "app/build_log.txt" ]; then
              LOG_FILE="app/build_log.txt"
            fi
          fi

          if [ -z "$LOG_FILE" ]; then
            echo "No build log found; creating minimal log..."
            echo "Build gagal pada tahap awal atau tidak ada log lengkap." > build_log_fallback.txt
            LOG_FILE="build_log_fallback.txt"
          fi

          echo "Filtering sensitive information from $LOG_FILE ..."
          REDACTED_LOG_FILE="build_log_redacted.txt"

          sed \
            -e 's|https?://cordova\.build\.appjs\.net[^ ]*|[User_privacy_security_PATH_is_hidden]|g' \
            -e 's|/home/runner/work/[^ ]*|[User_privacy_security_PATH_is_hidden]|g' \
            -e 's|/opt/hostedtoolcache/[^ ]*|[User_privacy_security_PATH_is_hidden]|g' \
            -e 's|[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}|[User_privacy_security_PATH_is_hidden]|g' \
            "$LOG_FILE" > "$REDACTED_LOG_FILE"

          echo "Uploading redacted error log to server..."
          curl -X POST \
            -F "logFile=@$REDACTED_LOG_FILE" \
            -F "buildId=${{ github.event.client_payload.buildId }}" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            https://cordova.build.appjs.net/upload-log/$USER_ID
