name: Cordova Build (Debug/Release APK/AAB)

on:
  repository_dispatch:
    types: [trigger-build]

env:
  # CATATAN: JDK 17 diperlukan untuk cordova-android@13+
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.2.0'
  NODE_VERSION: '20'
  # CATATAN: API 35 adalah versi pratinjau (Android 15), mungkin kurang stabil.
  # Pertimbangkan menggunakan '34' untuk versi stabil.
  ANDROID_API_LEVEL: '35'
  ANDROID_BUILD_TOOLS: '35.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: ${{ github.event.client_payload.timeoutMinutes || 8 }}
    outputs:
      outcome: ${{ steps.final_check.outputs.outcome }}

    steps:
      - name: Record start time
        shell: bash
        run: echo "start_time=$(date +%s)" >> $GITHUB_ENV

      - name: Report Build In Progress
        shell: bash
        run: |
          curl --fail -X POST \
            -H "Content-Type: application/json" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            -d '{
              "buildId": "${{ github.event.client_payload.buildId }}",
              "userId": "${{ github.event.client_payload.userId }}",
              "status": "in_progress"
            }' \
            "${{ github.event.client_payload.internalApiUrl }}/api/github-webhook"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Download and Unzip Project
        shell: bash
        run: |
          set -e
          ZIP_URL="${{ github.event.client_payload.projectUrl }}"
          echo "Using project URL (internal): $ZIP_URL"
          mkdir -p cordova-project
          curl -L -f -o cordovaProject.zip "$ZIP_URL"
          unzip -q cordovaProject.zip -d cordova-project
          echo "Unzipped project -> listing top-level:"
          ls -la cordova-project | sed -n '1,200p'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            cordova-project/.gradle
          key: gradle-${{ runner.os }}-v${{ env.GRADLE_VERSION }}-${{ hashFiles('cordova-project/**/gradle-wrapper.properties', 'cordova-project/**/*.gradle*') }}
          restore-keys: |
            gradle-${{ runner.os }}-v${{ env.GRADLE_VERSION }}-
            gradle-${{ runner.os }}-

      - name: Cache project node_modules
        uses: actions/cache@v4
        with:
          path: cordova-project/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('cordova-project/package-lock.json', 'cordova-project/package.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Cache npm local cache
        uses: actions/cache@v4
        with:
          path: $HOME/.npm
          key: npm-cache-${{ runner.os }}-${{ hashFiles('cordova-project/**/package-lock.json') }}
          restore-keys: |
            npm-cache-${{ runner.os }}-

      - name: Cache Android SDK components
        uses: actions/cache@v4
        with:
          path: |
            $HOME/Android/Sdk/platforms
            $HOME/Android/Sdk/build-tools
            $HOME/Android/Sdk/platform-tools
            $HOME/Android/Sdk/extras
            $HOME/.android
          key: android-sdk-${{ runner.os }}-api${{ env.ANDROID_API_LEVEL }}-bt${{ env.ANDROID_BUILD_TOOLS }}
          restore-keys: |
            android-sdk-${{ runner.os }}-

      - name: Install Cordova CLI (global)
        shell: bash
        run: npm install -g cordova

      - name: Ensure Android SDK root exists and cmdline-tools
        shell: bash
        run: |
          set -e
          SDK_ROOT="$HOME/Android/Sdk"
          echo "Using SDK_ROOT=$SDK_ROOT"
          mkdir -p "${SDK_ROOT}"
          sudo chown -R $USER: "${SDK_ROOT}"
          
          if [ ! -d "${SDK_ROOT}/cmdline-tools/latest" ]; then
            tmpdir=$(mktemp -d)
            cd "$tmpdir"
            echo "Downloading Android commandline tools..."
            curl -sS -L "https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip" -o cmdline.zip
            unzip -q cmdline.zip
            mkdir -p "${SDK_ROOT}/cmdline-tools"
            mv cmdline-tools "${SDK_ROOT}/cmdline-tools/latest" || true
            cd -
            rm -rf "$tmpdir"
          fi

          export PATH="${SDK_ROOT}/cmdline-tools/latest/bin:${SDK_ROOT}/tools/bin:$PATH"
          yes | sdkmanager --sdk_root="${SDK_ROOT}" --licenses >/dev/null || true
          sdkmanager --sdk_root="${SDK_ROOT}" "platform-tools" "platforms;android-${ANDROID_API_LEVEL}" "build-tools;${ANDROID_BUILD_TOOLS}" || true

      - name: Ensure Gradle wrapper version is locked
        shell: bash
        run: |
          set -e
          cd cordova-project || exit 0
          if [ -f gradlew ]; then
            echo "Updating gradle wrapper to ${GRADLE_VERSION}"
            chmod +x ./gradlew
            ./gradlew wrapper --gradle-version=${GRADLE_VERSION} --distribution-type=all || true
          else
            echo "No gradlew found in project â€” will rely on system Gradle (not recommended)."
          fi

      - name: Install Dependencies and Build Project
        id: cordova_build_step
        shell: bash
        env:
          ANDROID_HOME: $HOME/Android/Sdk
          ANDROID_SDK_ROOT: $HOME/Android/Sdk
          PATH: $HOME/Android/Sdk/platform-tools:$PATH
        run: |
          set -e
          # Redirect semua output ke top-level build_log.txt (upload saat gagal)
          exec &> ../build_log.txt

          cd cordova-project

          echo "--- Node dependencies ---"
          if [ -f package-lock.json ]; then
            npm ci --prefer-offline --no-audit --progress=false
          else
            npm install --prefer-offline --no-audit --progress=false
          fi

          echo "--- Ensure Android platform present ---"
          # Menghapus dan menambah platform untuk memastikan file sesuai
          cordova platform rm android || true
          # Menggunakan versi spesifik sesuai permintaan
          cordova platform add android@14.0.1 --no-fetch

          echo "--- Gradle settings ---"
          export GRADLE_OPTS="-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-Xmx1536m"

          echo "--- Starting Cordova Build ---"
          if [[ "${{ github.event.client_payload.buildType }}" == "debug-apk" ]]; then
            cordova build android --debug -- --gradleArg=--no-daemon --gradleArg=-Pandroid.useAndroidX=true
          else
            echo "--- Downloading Keystore for Release Build ---"
            KEYSTORE_URL="${{ github.event.client_payload.keystoreUrl }}"
            if [ -z "$KEYSTORE_URL" ]; then
              echo "::error::Missing keystore URL for release build"
              exit 2
            fi
            curl -L -f -o release.jks "$KEYSTORE_URL"

            PACKAGE_TYPE_FLAG=""
            if [[ "${{ github.event.client_payload.buildType }}" == "release-aab" ]]; then
              PACKAGE_TYPE_FLAG="--packageType=bundle"
            fi

            echo "--- Running release build (signed) ---"
            cordova build android --release -- --gradleArg=--no-daemon \
              --keystore="release.jks" \
              --alias="${{ github.event.client_payload.keyAlias }}" \
              --storePassword="${{ github.event.client_payload.keystorePassword }}" \
              --password="${{ github.event.client_payload.keyPassword }}" \
              --gradleArg=-Pandroid.useAndroidX=true \
              $PACKAGE_TYPE_FLAG
          fi
          echo "--- Cordova Build Finished ---"

      # PENTING: Step ini akan menampilkan log error jika step di atas gagal
      - name: Display Build Log on Failure
        if: failure()
        shell: bash
        run: |
          echo "--- Build failed. Displaying contents of build_log.txt ---"
          cat build_log.txt
          
      - name: Setup SSH for SCP
        if: success()
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Upload Build File via SCP and Report Success
        if: success()
        shell: bash
        run: |
          USER_ID="${{ github.event.client_payload.userId }}"
          BUILD_ID="${{ github.event.client_payload.buildId }}"
          BUILD_TYPE="${{ github.event.client_payload.buildType }}"
          
          ARTIFACT_PATH=$(find cordova-project/platforms/android/app -name "*.aab" -o -name "*.apk" | head -n 1)
          if [ -z "$ARTIFACT_PATH" ]; then echo "::error::Build artifact not found!"; exit 1; fi

          if [[ "$BUILD_TYPE" == "debug-apk" ]]; then PREFIX="debug"; else PREFIX="release"; fi
          if [[ "$BUILD_TYPE" == "release-aab" ]]; then EXTENSION="aab"; else EXTENSION="apk"; fi
          NEW_FILENAME="${PREFIX}_${BUILD_ID}.${EXTENSION}"

          ssh -o StrictHostKeyChecking=no emi@84.46.248.72 "mkdir -p /home/emi/swaplab-project/apps/cordova-app/public/builds/$USER_ID"
          scp -o StrictHostKeyChecking=no "$ARTIFACT_PATH" emi@84.46.248.72:/home/emi/swaplab-project/apps/cordova-app/public/builds/$USER_ID/$NEW_FILENAME

          DOWNLOAD_URL="${{ github.event.client_payload.publicBaseUrl }}/builds/$USER_ID/$NEW_FILENAME"

          end_time=$(date +%s)
          duration=$((end_time - start_time))

          curl --fail -X POST \
            -H "Content-Type: application/json" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            -d '{
              "buildId": "'"$BUILD_ID"'", "userId": "'"$USER_ID"'",
              "status": "complete", "durationSeconds": "'"$duration"'", "downloadUrl": "'"$DOWNLOAD_URL"'"
            }' \
            "${{ github.event.client_payload.internalApiUrl }}/api/github-webhook"

      - name: Upload Log File and Report Failure
        if: failure()
        shell: bash
        run: |
          INTERNAL_API_URL="${{ github.event.client_payload.internalApiUrl }}"
          if [ -z "$INTERNAL_API_URL" ]; then
              echo "::error::Fatal: internalApiUrl not received in payload. Cannot report failure."
              exit 1
          fi

          USER_ID="${{ github.event.client_payload.userId }}"
          BUILD_ID="${{ github.event.client_payload.buildId }}"
          
          LOG_FILE_PATH="build_log.txt"
          if [ ! -f "${LOG_FILE_PATH}" ]; then
            echo "Build failed very early. Main log file not found." > ${LOG_FILE_PATH}
          fi
          
          UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST -F "logFile=@${LOG_FILE_PATH}" -F "buildId=$BUILD_ID" -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" "$INTERNAL_API_URL/upload-log/$USER_ID")
          LOG_FILENAME=$(echo "$UPLOAD_RESPONSE" | sed '$d')
          LOG_SNIPPET=$(tail -n 50 ${LOG_FILE_PATH})
          CLEANED_LOG_SNIPPET=$(echo "$LOG_SNIPPET" | sed -E 's|/home/runner/work/[^/]+/[^/]+|[...]|g')
          ESCAPED_LOG_SNIPPET=$(echo "$CLEANED_LOG_SNIPPET" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | awk "{printf \"%s\\\\n\", \$0}" | sed 's/$/\\n/' | tr -d '\n')
          end_time=$(date +%s)
          duration=$((end_time - start_time))

          curl --fail -X POST -H "Content-Type: application/json" -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" -d '{"buildId": "'"$BUILD_ID"'", "userId": "'"$USER_ID"'","status": "failed", "durationSeconds": "'"$duration"'", "logFile": "'"$LOG_FILENAME"'","logSnippet": "'"$ESCAPED_LOG_SNIPPET"'"}' "$INTERNAL_API_URL/api/github-webhook"

      - name: Final check
        id: final_check
        if: always()
        shell: bash
        run: |
          echo "outcome=${{ job.status }}" >> $GITHUB_OUTPUT
