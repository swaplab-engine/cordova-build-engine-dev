name: Cordova Build (Debug/Release APK/AAB)

on:
  repository_dispatch:
    types: [trigger-build]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: ${{ github.event.client_payload.timeoutMinutes || 8 }}
    
    # ID ini penting untuk referensi di langkah terakhir
    outputs:
      outcome: ${{ steps.final_check.outputs.outcome }}

    steps:
      - name: Record start time
        shell: bash
        run: echo "start_time=$(date +%s)" >> $GITHUB_ENV

      - name: Report Build In Progress
        shell: bash
        run: |
          curl --fail -X POST \
            -H "Content-Type: application/json" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            -d '{
              "buildId": "${{ github.event.client_payload.buildId }}",
              "userId": "${{ github.event.client_payload.userId }}",
              "status": "in_progress"
            }' \
            "${{ github.event.client_payload.appBaseUrl }}/api/github-webhook"

      - name: Set up Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache global npm packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-global-v3

      - name: Install Cordova CLI
        shell: bash
        run: npm install -g cordova

      - name: Download and Unzip Project
        shell: bash
        run: |
          ZIP_URL="${{ github.event.client_payload.projectUrl }}"
          curl -L -o cordovaProject.zip "$ZIP_URL"
          mkdir cordova-project
          unzip cordovaProject.zip -d cordova-project

      - name: Prepare Signing Configuration
        if: ${{ startsWith(github.event.client_payload.buildType, 'release') }}
        shell: bash
        run: |
          cd cordova-project
          KEYSTORE_URL="${{ github.event.client_payload.keystoreUrl }}"
          curl -L -o release.jks "$KEYSTORE_URL"
          PACKAGE_TYPE="apk"
          if [[ "${{ github.event.client_payload.buildType }}" == "release-aab" ]]; then
            PACKAGE_TYPE="bundle"
          fi
          cat > build.json << EOF
          { "android": { "release": { "keystore": "release.jks", "storePassword": "${{ github.event.client_payload.keystorePassword }}", "alias": "${{ github.event.client_payload.keyAlias }}", "password": "${{ github.event.client_payload.keyPassword }}", "packageType": "$PACKAGE_TYPE" } } }
          EOF

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('cordova-project/**/gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Install Dependencies and Build Project
        id: cordova_build_step # Beri ID pada langkah ini
        shell: bash
        run: |
          cd cordova-project
          {
            echo "--- Installing Project Dependencies ---"
            npm install
            echo "--- Adding Android Platform ---"
            cordova platform add android
            echo "--- Starting Cordova Build ---"
            if [[ "${{ github.event.client_payload.buildType }}" == "debug-apk" ]]; then
              cordova build android --debug -- --gradleArg=--no-daemon
            else
              cordova build android --release --buildConfig=build.json -- --gradleArg=--no-daemon
            fi
            echo "--- Cordova Build Finished ---"
          } > ../build_log.txt 2>&1
        
      - name: Upload Build File and Report Success
        if: success()
        shell: bash
        run: |
          BUILD_TYPE="${{ github.event.client_payload.buildType }}"
          USER_ID="${{ github.event.client_payload.userId }}"
          APP_BASE_URL="${{ github.event.client_payload.appBaseUrl }}"
          
          ARTIFACT_PATH=""
          if [[ "$BUILD_TYPE" == "release-aab" ]]; then
            ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/bundle/release -name "*.aab" | head -n 1)
          elif [[ "$BUILD_TYPE" == "release-apk" ]]; then
            ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
          else
            ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/apk/debug -name "*.apk" | head -n 1)
          fi
          
          if [ -z "$ARTIFACT_PATH" ]; then echo "::error::Build artifact not found!"; exit 1; fi

          UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" --fail -X POST \
            -F "buildFile=@$ARTIFACT_PATH" \
            -F "buildId=${{ github.event.client_payload.buildId }}" \
            -F "buildType=$BUILD_TYPE" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            "$APP_BASE_URL/upload-result/$USER_ID")
          
          HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
          DOWNLOAD_URL=$(echo "$UPLOAD_RESPONSE" | sed '$d')

          if [[ "$HTTP_CODE" != "200" ]]; then echo "::error::Gagal upload. Kode: $HTTP_CODE"; exit 1; fi

          end_time=$(date +%s)
          duration=$((end_time - start_time))

          curl --fail -X POST \
            -H "Content-Type: application/json" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            -d '{
              "buildId": "${{ github.event.client_payload.buildId }}", "userId": "'"$USER_ID"'",
              "status": "complete", "durationSeconds": "'"$duration"'", "downloadUrl": "'"$DOWNLOAD_URL"'"
            }' \
            "$APP_BASE_URL/api/github-webhook"

      
       - name: Install Dependencies and Build Project
        id: cordova_build_step
        shell: bash
        # Tambahkan continue-on-error agar langkah 'Report Failure' di bawahnya PASTI berjalan
        # dan bisa menangkap log. Status kegagalan job tetap akan dilaporkan.
        continue-on-error: true 
        run: |
          # Buat file log kosong di awal untuk memastikan file selalu ada
          touch ../build_log.txt
          cd cordova-project
          {
            echo "--- Installing Project Dependencies ---"
            npm install
            echo "--- Adding Android Platform ---"
            cordova platform add android
            echo "--- Starting Cordova Build ---"
            if [[ "${{ github.event.client_payload.buildType }}" == "debug-apk" ]]; then
              cordova build android --debug -- --gradleArg=--no-daemon
            else
              cordova build android --release --buildConfig=build.json -- --gradleArg=--no-daemon
            fi
            echo "--- Cordova Build Finished ---"
          } > ../build_log.txt 2>&1

      # Langkah ini ditambahkan untuk memeriksa hasil dari langkah build secara eksplisit
      - name: Final Check on Build Status
        id: final_check
        if: always() # Selalu jalankan langkah ini
        shell: bash
        run: |
          if [[ ${{ steps.cordova_build_step.outcome }} == 'success' ]]; then
            echo "Build step succeeded."
            echo "outcome=success" >> $GITHUB_OUTPUT
          else
            echo "::error::Build step failed. See the log for details."
            echo "outcome=failure" >> $GITHUB_OUTPUT
            # Perintah exit 1 ini akan membuat seluruh job dianggap gagal.
            exit 1
          fi

      - name: Upload Build File and Report Success
        # Jalankan HANYA jika langkah final_check berhasil
        if: steps.final_check.outputs.outcome == 'success'
        shell: bash
        run: |
          # ... (isi langkah ini tidak berubah) ...

      # **PERBAIKAN UTAMA PADA PENANGANAN ERROR**
      - name: Upload Log File and Report Failure
        # Jalankan HANYA jika langkah final_check GAGAL
        if: failure() && steps.final_check.outputs.outcome == 'failure'
        shell: bash
        run: |
          USER_ID="${{ github.event.client_payload.userId }}"
          APP_BASE_URL="${{ github.event.client_payload.appBaseUrl }}"
          BUILD_ID="${{ github.event.client_payload.buildId }}"

          # Cek file log di lokasi yang benar (root workspace)
          if [ ! -f "build_log.txt" ]; then
            echo "Build failed very early. Log file was not generated." > build_log.txt
          fi

          # Upload file log lengkap untuk admin (tidak berubah)
          echo "--- Uploading full log file for admin ---"
          LOG_FILENAME=$(curl -s --fail -X POST \
            -F "logFile=@build_log.txt" \
            -F "buildId=$BUILD_ID" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            "$APP_BASE_URL/upload-log/$USER_ID")
          
          if [ -z "$LOG_FILENAME" ]; then
            echo "::error::Failed to upload log file."
            # Tetap lanjutkan untuk melaporkan kegagalan meskipun upload log gagal
            LOG_FILENAME=""
          fi

          end_time=$(date +%s)
          duration=$((end_time - start_time))

          # Ambil 50 baris terakhir dari log sebagai cuplikan untuk pengguna
          LOG_SNIPPET=$(tail -n 50 build_log.txt | jq -s -R .)

          # Kirim laporan kegagalan ke server.js
          echo "--- Reporting failure to webhook ---"
          curl --fail -X POST \
            -H "Content-Type: application/json" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            -d '{
              "buildId": "'"$BUILD_ID"'",
              "userId": "'"$USER_ID"'",
              "status": "failed",
              "durationSeconds": "'"$duration"'",
              "logFile": "'"$LOG_FILENAME"'",
              "logSnippet": '"$LOG_SNIPPET"',
              "ciProvider": "github"
            }' \
            "$APP_BASE_URL/api/github-webhook"
