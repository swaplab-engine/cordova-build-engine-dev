name: Cordova Build (Debug/Release APK/AAB)

on:
  repository_dispatch:
    types: [trigger-build]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: ${{ github.event.client_payload.timeoutMinutes || 8 }}
    outputs:
      outcome: ${{ steps.final_check.outputs.outcome }}

    steps:
      - name: Record start time
        shell: bash
        run: echo "start_time=$(date +%s)" >> $GITHUB_ENV

      # ===================================================================
      # 1. PERSIAPAN DAN LAPORAN STATUS AWAL
      # ===================================================================
      - name: Define log reporting function
        shell: bash
        run: |
          # Fungsi ini akan kita gunakan untuk mengirim update status ke server
          send_log() {
            MESSAGE="$1"
            echo "LOG: $MESSAGE"
            # JSON di-escape agar aman di dalam shell script
            JSON_PAYLOAD=$(printf '{"buildId": "%s", "userId": "%s", "status": "log_update", "message": "%s"}' \
              "${{ github.event.client_payload.buildId }}" \
              "${{ github.event.client_payload.userId }}" \
              "$MESSAGE")

            curl --fail -X POST \
              -H "Content-Type: application/json" \
              -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
              -d "$JSON_PAYLOAD" \
              "${{ github.event.client_payload.appBaseUrl }}/api/github-webhook"
          }
          # Simpan fungsi ke environment agar bisa dipakai di langkah selanjutnya
          declare -f send_log >> $GITHUB_ENV

      - name: Report Build In Progress
        shell: bash
        run: |
          # Muat fungsi send_log dari environment
          source $GITHUB_ENV
          
          # Kirim log pertama kali
          send_log "Memulai proses build..."
          
          # Kirim status 'in_progress' untuk memulai timer di UI dan melacak run_id
          curl --fail -X POST \
            -H "Content-Type: application/json" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            -d '{
              "buildId": "${{ github.event.client_payload.buildId }}",
              "userId": "${{ github.event.client_payload.userId }}",
              "status": "in_progress",
              "ciProvider": "github",
              "runId": "${{ github.run_id }}"
            }' \
            "${{ github.event.client_payload.appBaseUrl }}/api/github-webhook"

      # ===================================================================
      # 2. SETUP LINGKUNGAN BUILD
      # ===================================================================
      - name: Set up Build Environment
        shell: bash
        run: |
          source $GITHUB_ENV
          send_log "Mempersiapkan lingkungan (Node.js & Java)..."
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # ===================================================================
      # 3. PROSES CACHING UNTUK PERCEPATAN
      # ===================================================================
      - name: Check and Restore Cache
        shell: bash
        run: |
          source $GITHUB_ENV
          send_log "Memeriksa cache untuk percepatan build..."
      - name: Cache global npm packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-global-cache-v4
      - name: Cache Cordova CLI installation
        uses: actions/cache@v4
        with:
          path: /opt/hostedtoolcache/node/20.*.*/lib/node_modules/cordova
          key: ${{ runner.os }}-cordova-cli-v1

      # ===================================================================
      # 4. PERSIAPAN PROYEK CORDOVA
      # ===================================================================
      - name: Install Cordova CLI
        shell: bash
        run: |
          source $GITHUB_ENV
          send_log "Menginstal Cordova CLI..."
          if [ ! -d "/opt/hostedtoolcache/node/20.*.*/lib/node_modules/cordova" ]; then
            npm install -g cordova
          else
            echo "Cordova CLI dipulihkan dari cache."
          fi
          echo "/opt/hostedtoolcache/node/20.*.*/bin" >> $GITHUB_PATH

      - name: Download and Unzip Project
        shell: bash
        run: |
          source $GITHUB_ENV
          send_log "Mengunduh dan mengekstrak proyek..."
          curl -L -o cordovaProject.zip "${{ github.event.client_payload.projectUrl }}"
          mkdir cordova-project
          unzip cordovaProject.zip -d cordova-project

      - name: Cache project dependencies (node_modules)
        uses: actions/cache@v4
        with:
          path: cordova-project/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('cordova-project/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
      
      - name: Prepare Signing Configuration
        if: ${{ startsWith(github.event.client_payload.buildType, 'release') }}
        shell: bash
        run: |
          source $GITHUB_ENV
          send_log "Mempersiapkan konfigurasi rilis..."
          cd cordova-project
          curl -L -o release.jks "${{ github.event.client_payload.keystoreUrl }}"
          PACKAGE_TYPE="apk"
          if [[ "${{ github.event.client_payload.buildType }}" == "release-aab" ]]; then
            PACKAGE_TYPE="bundle"
          fi
          cat > build.json << EOF
          { "android": { "release": { "keystore": "release.jks", "storePassword": "${{ github.event.client_payload.keystorePassword }}", "alias": "${{ github.event.client_payload.keyAlias }}", "password": "${{ github.event.client_payload.keyPassword }}", "packageType": "$PACKAGE_TYPE" } } }
          EOF

      # ===================================================================
      # 5. PROSES BUILD UTAMA
      # ===================================================================
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('cordova-project/**/gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Install Dependencies and Build Project
        id: cordova_build_step
        shell: bash
        run: |
          source $GITHUB_ENV
          send_log "Menginstal dependensi proyek (npm install)..."
          
          # Redirect output ke file log agar UI tidak menunggu.
          # Pesan error akan tetap muncul di log GitHub Actions jika npm ci/install gagal.
          cd cordova-project
          if [ -f "package-lock.json" ]; then
            npm ci > ../npm_install_log.txt 2>&1
          else
            npm install > ../npm_install_log.txt 2>&1
          fi

          send_log "Memulai kompilasi Android (proses ini mungkin lama)..."
          
          # Gabungkan semua output build ke satu file log
          {
            echo "--- Adding Android Platform & Building ---"
            cordova platform add android
            if [[ "${{ github.event.client_payload.buildType }}" == "debug-apk" ]]; then
              cordova build android --debug -- --gradleArg=--no-daemon
            else
              cordova build android --release --buildConfig=build.json -- --gradleArg=--no-daemon
            fi
            echo "--- Cordova Build Finished ---"
          } > ../build_log.txt 2>&1

      # ===================================================================
      # 6. PENYELESAIAN DAN PELAPORAN HASIL
      # ===================================================================
      - name: Finalizing and Uploading Artifact
        shell: bash
        run: |
          source $GITHUB_ENV
          send_log "Menyelesaikan dan mengemas hasil build..."

      - name: Upload Build File and Report Success
        if: success()
        shell: bash
        run: |
          # ... (Tidak ada perubahan di langkah ini) ...
          BUILD_TYPE="${{ github.event.client_payload.buildType }}"
          USER_ID="${{ github.event.client_payload.userId }}"
          APP_BASE_URL="${{ github.event.client_payload.appBaseUrl }}"
          ARTIFACT_PATH=""
          if [[ "$BUILD_TYPE" == "release-aab" ]]; then
            ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/bundle/release -name "*.aab" | head -n 1)
          elif [[ "$BUILD_TYPE" == "release-apk" ]]; then
            ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
          else
            ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/apk/debug -name "*.apk" | head -n 1)
          fi
          if [ -z "$ARTIFACT_PATH" ]; then echo "::error::Build artifact not found!"; exit 1; fi
          UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" --fail -X POST -F "buildFile=@$ARTIFACT_PATH" -F "buildId=${{ github.event.client_payload.buildId }}" -F "buildType=$BUILD_TYPE" -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" "$APP_BASE_URL/upload-result/$USER_ID")
          HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
          DOWNLOAD_URL=$(echo "$UPLOAD_RESPONSE" | sed '$d')
          if [[ "$HTTP_CODE" != "200" ]]; then echo "::error::Gagal upload. Kode: $HTTP_CODE"; exit 1; fi
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          curl --fail -X POST -H "Content-Type: application/json" -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" -d "{\"buildId\": \"${{ github.event.client_payload.buildId }}\", \"userId\": \"$USER_ID\", \"status\": \"complete\", \"durationSeconds\": \"$duration\", \"downloadUrl\": \"$DOWNLOAD_URL\", \"ciProvider\": \"github\"}" "$APP_BASE_URL/api/github-webhook"

      - name: Upload Log File and Report Failure
        if: failure() || cancelled()
        shell: bash
        run: |
          # ... (Tidak ada perubahan di langkah ini) ...
          USER_ID="${{ github.event.client_payload.userId }}"
          APP_BASE_URL="${{ github.event.client_payload.appBaseUrl }}"
          BUILD_ID="${{ github.event.client_payload.buildId }}"
          # Gabungkan semua log yang mungkin ada
          cat npm_install_log.txt build_log.txt > final_log.txt 2>/dev/null || cat build_log.txt > final_log.txt 2>/dev/null || echo "Build gagal pada tahap awal." > final_log.txt
          LOG_FILE_NAME="${BUILD_ID}.log"
          UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST -F "logFile=@final_log.txt;filename=${LOG_FILE_NAME}" -F "buildId=$BUILD_ID" -F "ci_provider=github" -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" "$APP_BASE_URL/upload-log/$USER_ID")
          HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
          LOG_URL_FILENAME=$(echo "$UPLOAD_RESPONSE" | sed '$d')
          LOG_URL=""
          if [[ "$HTTP_CODE" == "200" ]]; then LOG_URL="${APP_BASE_URL}/logs/github/${USER_ID}/${LOG_URL_FILENAME}"; fi
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          LOG_SNIPPET=$(tail -n 20 final_log.txt | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          curl --fail -X POST -H "Content-Type: application/json" -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" -d "{\"buildId\": \"$BUILD_ID\", \"userId\": \"$USER_ID\", \"status\": \"failed\", \"durationSeconds\": \"$duration\", \"logUrl\": \"$LOG_URL\", \"logSnippet\": \"$LOG_SNIPPET\", \"ciProvider\": \"github\"}" "$APP_BASE_URL/api/github-webhook"

      - name: Final check
        id: final_check
        if: always()
        shell: bash
        run: |
          echo "outcome=${{ job.status }}" >> $GITHUB_OUTPUT
