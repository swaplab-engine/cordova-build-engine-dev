name: Ionic Capacitor Build (Debug/Release APK/AAB)

on:
  repository_dispatch:
    types: [trigger-build]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: ${{ github.event.client_payload.timeoutMinutes }}

    steps:
      - name: Dump client_payload to log
        run: echo "${{ toJSON(github.event.client_payload) }}"

      - name: Set up Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # BARU: Instal Capacitor CLI secara global
      - name: Install Ionic and Capacitor CLI
        run: npm install -g @ionic/cli @capacitor/cli

      - name: Download and Unzip Project
        run: |
          ZIP_URL="${{ github.event.client_payload.projectUrl }}"
          curl -L -o capacitorProject.zip "$ZIP_URL"
          mkdir capacitor-project
          unzip capacitorProject.zip -d capacitor-project

      # Cache dependensi node_modules tetap sama
      - name: Cache project dependencies (node_modules)
        uses: actions/cache@v4
        with:
          path: capacitor-project/node_modules
          key: ${{ runner.os }}-npm-project-${{ hashFiles('capacitor-project/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-project-

      # BARU: Cara penandatanganan (signing) untuk Capacitor
      - name: Prepare Signing Configuration for Capacitor
        run: |
          cd capacitor-project
          KEYSTORE_URL="${{ github.event.client_payload.keystoreUrl }}"
          curl -L -o android/app/release.jks "$KEYSTORE_URL"

          # Buat file gradle.properties untuk menyimpan kredensial keystore
          cat > android/gradle.properties << EOF
          android.useAndroidX=true
          android.enableJetifier=true
          MYAPP_RELEASE_STORE_FILE=release.jks
          MYAPP_RELEASE_STORE_PASSWORD=${{ github.event.client_payload.keystorePassword }}
          MYAPP_RELEASE_KEY_ALIAS=${{ github.event.client_payload.keyAlias }}
          MYAPP_RELEASE_KEY_PASSWORD=${{ github.event.client_payload.keyPassword }}
          EOF

      # Cache Gradle tetap sama
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('capacitor-project/android/**/*.gradle*', 'capacitor-project/android/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      # BARU: Langkah build untuk Capacitor
      - name: Install Dependencies and Build Project
        run: |
          cd capacitor-project
          {
            echo "Installing project dependencies..."
            npm install

            echo "Adding Android platform..."
            npx cap add android

            echo "Syncing project..."
            npx cap sync android
            
            echo "Building Capacitor project..."
            cd android
            chmod +x ./gradlew
            
            # Pilih perintah build berdasarkan tipe (AAB atau APK)
            if [[ "${{ github.event.client_payload.buildType }}" == "release-aab" ]]; then
              echo "Building AAB (release)..."
              ./gradlew bundleRelease --no-daemon
            else
              echo "Building APK (release)..."
              ./gradlew assembleRelease --no-daemon
            fi
          } > build_log.txt 2>&1

      # BARU: Lokasi artefak build di Capacitor
      - name: Upload Build File to Your Server
        if: success()
        run: |
          BUILD_TYPE="${{ github.event.client_payload.buildType }}"
          USER_ID="${{ github.event.client_payload.userId }}"
          ARTIFACT_PATH=""

          if [[ "$BUILD_TYPE" == "release-aab" ]]; then
            ARTIFACT_PATH=$(find capacitor-project/android/app/build/outputs/bundle/release -name "*.aab" | head -n 1)
          else
            ARTIFACT_PATH=$(find capacitor-project/android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
          fi

          if [ -z "$ARTIFACT_PATH" ]; then
            echo "::error::Build artifact not found!"
            exit 1
          fi

          curl -X POST \
            -F "buildFile=@$ARTIFACT_PATH" \
            -F "buildId=${{ github.event.client_payload.buildId }}" \
            -F "buildType=$BUILD_TYPE" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            https://cordova.build.appjs.net/upload-result/$USER_ID

      # Langkah upload log error tetap sama
      - name: Filter and Upload Error Log
        if: failure()
        run: |
          # ... (salin dan tempel langkah upload log error Anda di sini)
          # Kode ini tidak perlu diubah.
          USER_ID="${{ github.event.client_payload.userId }}"
          LOG_FILE="capacitor-project/build_log.txt"
          REDACTED_LOG_FILE="capacitor-project/build_log_redacted.txt"

          if [ ! -f "$LOG_FILE" ]; then
            echo "Build gagal pada tahap sangat awal." > "$LOG_FILE"
            echo "Kemungkinan terjadi kesalahan saat mengunduh atau mempersiapkan dependensi awal." >> "$LOG_FILE"
            echo "Tidak ada log build detail yang dapat dihasilkan." >> "$LOG_FILE"
            echo "Mohon periksa kembali file proyek Anda (capacitor.config.json, package.json) dan coba lagi." >> "$LOG_FILE"
          fi
          
          echo "Filtering sensitive information from log file..."
          
          sed \
            -e 's|https?://cordova\.build\.appjs\.net[^ ]*|[User_privacy_security_PATH_is_hidden]|g' \
            -e 's|/home/runner/work/[^ ]*|[User_privacy_security_PATH_is_hidden]|g' \
            -e 's|/opt/hostedtoolcache/[^ ]*|[User_privacy_security_PATH_is_hidden]|g' \
            -e 's|[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}|[User_privacy_security_PATH_is_hidden]|g' \
            "$LOG_FILE" > "$REDACTED_LOG_FILE"

          echo "Uploading redacted error log to server..."
          curl -X POST \
            -F "logFile=@$REDACTED_LOG_FILE" \
            -F "buildId=${{ github.event.client_payload.buildId }}" \
            -H "X-Build-Secret: ${{ secrets.WEBHOOK_SECRET }}" \
            https://cordova.build.appjs.net/upload-log/$USER_ID
