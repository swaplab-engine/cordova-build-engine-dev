version: 2.1

parameters:
  userId:
    type: string
    default: ""
  buildId:
    type: string
    default: ""
  projectUrl:
    type: string
    default: ""
  appBaseUrl:
    type: string
    default: ""
  buildType:
    type: string
    default: "debug-apk"
  ci_provider:
    type: string
    default: "circleci"
  keystoreUrl:
    type: string
    default: ""
  keystorePassword:
    type: string
    default: ""
  keyAlias:
    type: string
    default: ""
  keyPassword:
    type: string
    default: ""
  timeoutMinutes:
    type: integer
    default: 12 # Disesuaikan untuk Capacitor

jobs:
  build:
    docker:
      - image: cimg/android:2024.11.1-node
    
    working_directory: ~/project

    environment:
      USER_ID: << pipeline.parameters.userId >>
      BUILD_ID: << pipeline.parameters.buildId >>
      APP_BASE_URL: << pipeline.parameters.appBaseUrl >>
      BUILD_TYPE_RAW: << pipeline.parameters.buildType >>
      CI_PROVIDER: << pipeline.parameters.ci_provider >>
      # Menambahkan variabel lain untuk kemudahan
      KEYSTORE_URL: << pipeline.parameters.keystoreUrl >>
      KEYSTORE_PASSWORD: << pipeline.parameters.keystorePassword >>
      KEY_ALIAS: << pipeline.parameters.keyAlias >>
      KEY_PASSWORD: << pipeline.parameters.keyPassword >>

    steps:
      - checkout

      - run:
          name: "Report Build In Progress & Start Time"
          command: |
            echo 'export START_TIME=$(date +%s)' >> $BASH_ENV
            curl --fail -X POST \
              -H "Content-Type: application/json" \
              -H "X-Build-Secret: $WEBHOOK_SECRET" \
              -d '{
                "buildId": "<< pipeline.parameters.buildId >>",
                "userId": "<< pipeline.parameters.userId >>",
                "status": "in_progress"
              }' \
              "<< pipeline.parameters.appBaseUrl >>/api/github-webhook"

      - run:
          name: "Download and Unzip Project"
          command: |
            curl -L -o project.zip "<< pipeline.parameters.projectUrl >>"
            mkdir -p app
            unzip -o project.zip -d app

      - restore_cache:
          keys:
            - v1-capacitor-deps-{{ checksum "app/package-lock.json" }}
            - v1-capacitor-deps-

      - run:
          name: "Prepare Keystore (Release Only)"
          working_directory: app
          command: |
            if [[ "$BUILD_TYPE_RAW" == "release-apk" || "$BUILD_TYPE_RAW" == "release-aab" ]]; then
              if [ -z "$KEYSTORE_URL" ]; then
                echo "keystoreUrl is required for release builds"
                exit 1
              fi
              mkdir -p android/app
              curl -L -o android/app/release.jks "$KEYSTORE_URL"
            fi
            
      - run:
          name: "Install, Sync, and Build Project"
          working_directory: app
          no_output_timeout: << pipeline.parameters.timeoutMinutes >>m
          command: |
            {
              echo "--- Installing Project Dependencies ---"
              if [ -f package-lock.json ]; then npm ci; else npm install; fi

              echo "--- Building Web Assets & Ensuring Capacitor ---"
              npm run build --if-present
              if ! node -e "require('fs').existsSync('node_modules/@capacitor/cli')" 2>/dev/null; then
                npm install --no-audit --no-fund --save-dev @capacitor/cli @capacitor/core @capacitor/android
              fi
              
              echo "--- Adding / Syncing Android Platform ---"
              # Logika krusial untuk mengatasi masalah cache
              if [ ! -f "android/gradlew" ]; then
                echo "Android project is incomplete. Forcing removal and re-adding..."
                rm -rf android
                npx cap add android
              fi
              npx cap sync android

              echo "--- Starting Gradle Build ---"
              cd android
              chmod +x ./gradlew

              BUILD_TYPE=$(echo "$BUILD_TYPE_RAW" | tr '[:upper:]' '[:lower:]')

              if [[ "$BUILD_TYPE" == debug* ]]; then
                ./gradlew assembleDebug --no-daemon
              else
                STORE_PATH="$(pwd)/app/release.jks"
                if [[ "$BUILD_TYPE" == *aab* || "$BUILD_TYPE" == *bundle* ]]; then
                    TASK="bundleRelease"
                else
                    TASK="assembleRelease"
                fi
                
                ./gradlew $TASK --no-daemon \
                  -Pandroid.injected.signing.store.file="$STORE_PATH" \
                  -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
                  -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
                  -Pandroid.injected.signing.key.password="$KEY_PASSWORD"
              fi
              echo "--- Build Finished ---"
            } > ../build_log.txt 2>&1
      
      - save_cache:
          key: v1-capacitor-deps-{{ checksum "app/package-lock.json" }}
          paths:
            - app/node_modules
            - /home/circleci/.gradle

      - run:
          name: "Upload Build File and Report Success"
          when: on_success
          command: |
            BUILD_TYPE=$(echo "$BUILD_TYPE_RAW" | tr '[:upper:]' '[:lower:]')
            ARTIFACT_PATH=""

            if [[ "$BUILD_TYPE" == *aab* || "$BUILD_TYPE" == *bundle* ]]; then
              ARTIFACT_PATH=$(find app/android/app/build/outputs/bundle/release -name "*.aab" | head -n 1)
            elif [[ "$BUILD_TYPE" == debug* ]]; then
              ARTIFACT_PATH=$(find app/android/app/build/outputs/apk/debug -name "*.apk" | head -n 1)
            else
              ARTIFACT_PATH=$(find app/android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
            fi

            if [ -z "$ARTIFACT_PATH" ]; then echo "Build artifact not found!"; exit 1; fi
            
            UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" --fail -X POST -F "buildFile=@$ARTIFACT_PATH" -F "buildId=$BUILD_ID" -F "buildType=$BUILD_TYPE_RAW" -H "X-Build-Secret: $WEBHOOK_SECRET" "$APP_BASE_URL/upload-result/$USER_ID")
            HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
            DOWNLOAD_URL=$(echo "$UPLOAD_RESPONSE" | sed '$d')
            
            if [[ "$HTTP_CODE" != "200" ]]; then echo "Gagal upload. Kode: $HTTP_CODE"; exit 1; fi
            
            end_time=$(date +%s)
            duration=$((end_time - START_TIME))
            
            curl --fail -X POST -H "Content-Type: application/json" -H "X-Build-Secret: $WEBHOOK_SECRET" -d '{"buildId": "'"$BUILD_ID"'", "userId": "'"$USER_ID"'", "status": "complete", "durationSeconds": "'"$duration"'", "downloadUrl": "'"$DOWNLOAD_URL"'", "ciProvider": "'"$CI_PROVIDER"'"}' "$APP_BASE_URL/api/github-webhook"

      - run:
          name: "Upload Log File and Report Failure"
          when: on_fail
          command: |
            LOG_FILE_PATH="build_log.txt"
            if [ ! -f "$LOG_FILE_PATH" ]; then
                echo "Build gagal pada tahap sangat awal. File log utama tidak ditemukan." > $LOG_FILE_PATH
            fi
            
            UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST -F "logFile=@$LOG_FILE_PATH" -F "buildId=$BUILD_ID" -F "ci_provider=$CI_PROVIDER" -H "X-Build-Secret: $WEBHOOK_SECRET" "$APP_BASE_URL/upload-log/$USER_ID")
            HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
            LOG_FILENAME=$(echo "$UPLOAD_RESPONSE" | sed '$d')
            
            LOG_SNIPPET=$(tail -n 50 ${LOG_FILE_PATH})
            
            CLEANED_LOG_SNIPPET=$(echo "$LOG_SNIPPET" | sed -E 's|/home/circleci/project[^ ]*|[...]|g')
            CLEANED_LOG_SNIPPET=$(echo "$CLEANED_LOG_SNIPPET" | sed -E "s|${APP_BASE_URL}/uploads/[^ ]+|[PROTECTED_URL]|g")
            CLEANED_LOG_SNIPPET=$(echo "$CLEANED_LOG_SNIPPET" | sed -E "s|${APP_BASE_URL}/keystore/[^ ]+|[PROTECTED_URL]|g")
            
            ESCAPED_LOG_SNIPPET=$(echo "$CLEANED_LOG_SNIPPET" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | awk '{printf "%s\\n", $0}' | sed 's/$/\\n/' | tr -d '\n')

            end_time=$(date +%s)
            duration=$((end_time - START_TIME))
            
            curl --fail -X POST \
              -H "Content-Type: application/json" \
              -H "X-Build-Secret: $WEBHOOK_SECRET" \
              -d '{
                "buildId": "'"$BUILD_ID"'", 
                "userId": "'"$USER_ID"'", 
                "status": "failed", 
                "durationSeconds": "'"$duration"'", 
                "logFile": "'"$LOG_FILENAME"'", 
                "logSnippet": "'"$ESCAPED_LOG_SNIPPET"'",
                "ciProvider": "'"$CI_PROVIDER"'"
              }' \
              "$APP_BASE_URL/api/github-webhook"

workflows:
  build_capacitor_app:
    when: << pipeline.parameters.buildId >>
    jobs:
      - build
