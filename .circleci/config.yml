version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.1

parameters:
  userId:
    type: string
    default: ""
  buildId:
    type: string
    default: ""
  projectUrl:
    type: string
    default: ""
  appBaseUrl:
    type: string
    default: ""
  buildType:
    type: string
    default: "debug-apk"
  ci_provider: 
    type: string
    default: "circleci"
  keystoreUrl:
    type: string
    default: ""
  keystorePassword:
    type: string
    default: ""
  keyAlias:
    type: string
    default: ""
  keyPassword:
    type: string
    default: ""

jobs:
  build:
    docker:
      - image: cimg/android:2024.11.1-node
    resource_class: medium
    working_directory: ~/project
    environment:
      USER_ID: << pipeline.parameters.userId >>
      BUILD_ID: << pipeline.parameters.buildId >>
      APP_BASE_URL: << pipeline.parameters.appBaseUrl >>
      BUILD_TYPE: << pipeline.parameters.buildType >>
      CI_PROVIDER: << pipeline.parameters.ci_provider >>
      KEYSTORE_URL: << pipeline.parameters.keystoreUrl >>
      KEYSTORE_PASSWORD: << pipeline.parameters.keystorePassword >>
      KEY_ALIAS: << pipeline.parameters.keyAlias >>
      KEY_PASSWORD: << pipeline.parameters.keyPassword >>
      
    steps:
      - aws-cli/setup:
          aws_access_key_id: R2_ACCESS_KEY_ID
          aws_secret_access_key: R2_SECRET_ACCESS_KEY
          region: auto

      - run:
          name: "Initialize Build Environment and Logging"
          command: |
            set -ex
            echo "export START_TIME=$(date +%s)" >> $BASH_ENV
            echo '
            send_log_update() {
              MESSAGE="$1"
              curl --fail --connect-timeout 5 --max-time 10 -X POST -H "Content-Type: application/json" -H "X-Build-Secret: $WEBHOOK_SECRET" -d "{\"buildId\": \"$BUILD_ID\", \"userId\": \"$USER_ID\", \"status\": \"log_update\", \"message\": \"$MESSAGE\"}" "$APP_BASE_URL/api/github-webhook" || true
            }
            ' >> $BASH_ENV
            source $BASH_ENV
            send_log_update "Starting Capacitor build process on CircleCI..."
            curl --fail -X POST -H "Content-Type: application/json" -H "X-Build-Secret: $WEBHOOK_SECRET" -d '{"buildId": "<< pipeline.parameters.buildId >>", "userId": "<< pipeline.parameters.userId >>", "status": "in_progress", "ciProvider": "<< pipeline.parameters.ci_provider >>", "runId": "'"$CIRCLE_WORKFLOW_ID"'"}' "<< pipeline.parameters.appBaseUrl >>/api/github-webhook" || true

      - run:
          name: "Download and Unzip Project"
          command: |
            source $BASH_ENV
            send_log_update "Downloading and extracting project from storage..."
            mkdir -p capacitor-project
            curl -L -o project.zip "<< pipeline.parameters.projectUrl >>"
            unzip -q -o project.zip -d capacitor-project
      
      # ===================================================================
      # LANGKAH 1: SETUP DEPENDENSI & PLATFORM
      # ===================================================================
      - restore_cache:
          name: Restore NPM Cache
          keys:
            - npm-deps-cap-v1-{{ checksum "capacitor-project/package.json" }}
            - npm-deps-cap-v1-
            
      # OPTIMASI: Cache baru untuk platform Android yang sudah jadi.
      - restore_cache:
          name: Restore Capacitor Android Platform Cache
          keys:
            - cap-android-platform-v1-{{ checksum "capacitor-project/package.json" }}

      - run:
          name: "Install Dependencies & Add Android Platform"
          working_directory: ~/project/capacitor-project
          command: |
            source $BASH_ENV
            
            # Install NPM jika cache tidak ada
            if [ ! -d "node_modules" ]; then
              send_log_update "NPM cache miss. Installing dependencies (npm install)..."
              npm install > ../npm_install_log.txt 2>&1
            else
              send_log_update "NPM dependencies restored from cache."
            fi

            # Tambah platform Android jika cache platform tidak ada
            if [ ! -d "android" ]; then
              send_log_update "Android platform cache miss. Creating platform (npx cap add android)..."
              npx cap add android
            else
              send_log_update "Android platform restored from cache."
            fi

      - save_cache:
          name: Save NPM Cache
          key: npm-deps-cap-v1-{{ checksum "capacitor-project/package.json" }}
          paths:
            - capacitor-project/node_modules

      # OPTIMASI: Simpan cache platform Android yang baru dibuat.
      - save_cache:
          name: Save Capacitor Android Platform Cache
          key: cap-android-platform-v1-{{ checksum "capacitor-project/package.json" }}
          paths:
            - capacitor-project/android

      # ===================================================================
      # LANGKAH 2: SETUP CACHE GRADLE (SETELAH PLATFORM ADA)
      # ===================================================================
      # PERBAIKAN: Pindahkan restore_cache Gradle ke sini agar file build.gradle sudah ada.
      - restore_cache:
          name: Restore Gradle Cache
          keys:
            - gradle-cache-capacitor-v2-{{ checksum "capacitor-project/android/build.gradle" }}-{{ checksum "capacitor-project/android/app/build.gradle" }}
            - gradle-cache-capacitor-v2-
      
      # ===================================================================
      # LANGKAH 3: BUILD
      # ===================================================================
      - run:
          name: "Build Capacitor Project & Android App"
          working_directory: ~/project/capacitor-project
          no_output_timeout: 15m
          command: |
            set -ex
            source $BASH_ENV

            if [[ "$BUILD_TYPE" == "release-apk" || "$BUILD_TYPE" == "release-aab" ]]; then
              send_log_update "Preparing release keystore..."
              # Folder android dijamin sudah ada pada tahap ini
              curl -L -o android/app/release.jks "$KEYSTORE_URL"
            fi
            
            send_log_update "Building web assets (npm run build)..."
            npm run build --if-present

            send_log_update "Syncing web assets to Android platform (cap sync)..."
            npx cap sync android
            
            cd android
            chmod +x ./gradlew
            send_log_update "Starting Android compilation (this may take a while)..."
            {
              if [[ "$BUILD_TYPE" == "debug-apk" ]]; then
                ./gradlew assembleDebug --no-daemon
              else
                STORE_PATH="$(pwd)/app/release.jks"
                TASK="assembleRelease"
                if [[ "$BUILD_TYPE" == "release-aab" ]]; then TASK="bundleRelease"; fi
                ./gradlew $TASK --no-daemon \
                  -Pandroid.injected.signing.store.file="$STORE_PATH" \
                  -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
                  -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
                  -Pandroid.injected.signing.key.password="$KEY_PASSWORD"
              fi
            } > ../../build_log.txt 2>&1

      - save_cache:
          name: Save Gradle Cache
          key: gradle-cache-capacitor-v2-{{ checksum "capacitor-project/android/build.gradle" }}-{{ checksum "capacitor-project/android/app/build.gradle" }}
          paths:
            - /home/circleci/.gradle

      # ===================================================================
      # LANGKAH 4: UPLOAD & LAPORAN
      # ===================================================================
      - run:
          name: "Upload Build to R2 and Report Success"
          when: on_success
          command: |
            # ... (Tidak ada perubahan di sini)
            set -ex
            source $BASH_ENV
            send_log_update "Packaging and uploading build artifact to R2..."
            ARTIFACT_PATH=""
            ARTIFACT_EXT=""
            if [[ "$BUILD_TYPE" == "release-aab" ]]; then ARTIFACT_PATH=$(find capacitor-project/android/app/build/outputs/bundle/release -name "*.aab" | head -n 1); ARTIFACT_EXT="aab"; fi
            if [[ "$BUILD_TYPE" == "release-apk" ]]; then ARTIFACT_PATH=$(find capacitor-project/android/app/build/outputs/apk/release -name "*.apk" | head -n 1); ARTIFACT_EXT="apk"; fi
            if [[ "$BUILD_TYPE" == "debug-apk" ]]; then ARTIFACT_PATH=$(find capacitor-project/android/app/build/outputs/apk/debug -name "*.apk" | head -n 1); ARTIFACT_EXT="apk"; fi
            if [ -z "$ARTIFACT_PATH" ]; then echo "Build artifact not found!"; exit 1; fi
            R2_FILENAME="${BUILD_TYPE}-${BUILD_ID}.${ARTIFACT_EXT}"
            R2_OBJECT_KEY="builds/${USER_ID}/${R2_FILENAME}"
            R2_ENDPOINT="https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com"
            aws s3 cp "$ARTIFACT_PATH" "s3://${R2_BUCKET_NAME}/${R2_OBJECT_KEY}" --endpoint-url "$R2_ENDPOINT"
            DOWNLOAD_URL="${R2_PUBLIC_URL}/${R2_OBJECT_KEY}"
            end_time=$(date +%s)
            duration=$((end_time - START_TIME))
            curl --fail -X POST -H "Content-Type: application/json" -H "X-Build-Secret: $WEBHOOK_SECRET" -d "{\"buildId\": \"$BUILD_ID\", \"userId\": \"$USER_ID\", \"status\": \"complete\", \"durationSeconds\": \"$duration\", \"downloadUrl\": \"$DOWNLOAD_URL\", \"ciProvider\": \"$CI_PROVIDER\"}" "$APP_BASE_URL/api/github-webhook"

      - run:
          name: "Upload Log to R2 and Report Failure"
          when: on_fail
          command: |
            # ... (Tidak ada perubahan di sini)
            set -ex
            cat npm_install_log.txt build_log.txt > final_log.txt 2>/dev/null || cat build_log.txt > final_log.txt 2>/dev/null || cat npm_install_log.txt > final_log.txt 2>/dev/null || echo "Build failed in an early stage." > final_log.txt
            R2_LOG_FILENAME="${BUILD_ID}.log"
            R2_LOG_OBJECT_KEY="logs/${USER_ID}/${R2_LOG_FILENAME}"
            R2_ENDPOINT="https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com"
            aws s3 cp final_log.txt "s3://${R2_BUCKET_NAME}/${R2_LOG_OBJECT_KEY}" --endpoint-url "$R2_ENDPOINT"
            LOG_URL="${R2_PUBLIC_URL}/${R2_LOG_OBJECT_KEY}"
            LOG_SNIPPET=$(tail -n 20 final_log.txt | sed 's|/home/circleci/project/capacitor-project/[^ ]*|[PROJECT_PATH]|g' | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
            source $BASH_ENV
            end_time=$(date +%s)
            duration=$((end_time - START_TIME))
            curl --fail -X POST -H "Content-Type: application/json" -H "X-Build-secret: $WEBHOOK_SECRET" -d "{\"buildId\": \"$BUILD_ID\", \"userId\": \"$USER_ID\", \"status\": \"failed\", \"durationSeconds\": \"$duration\", \"logUrl\": \"$LOG_URL\", \"logSnippet\": \"$LOG_SNIPPET\", \"ciProvider\": \"$CI_PROVIDER\"}" "$APP_BASE_URL/api/github-webhook"

workflows:
  build_capacitor_app:
    when: << pipeline.parameters.buildId >>
    jobs:
      - build
