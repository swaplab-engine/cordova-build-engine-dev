# Nama file: .circleci/config.yml (Versi Final - Rapi & Efisien)
version: 2.1

# Menggunakan Orb resmi dari CircleCI untuk mengelola instalasi AWS CLI secara efisien.
orbs:
  aws-cli: circleci/aws-cli@4.1

parameters:
  appBaseUrl: { type: string, default: "" }
  buildId: { type: string, default: "" }
  buildToken: { type: string, default: "" }

jobs:
  build:
    docker:
      - image: cimg/base:stable
    steps:
      # Langkah 1: Menyiapkan lingkungan Docker terpisah dengan Layer Caching aktif.
      - setup_remote_docker:
          docker_layer_caching: true

      # Langkah 2: Menggunakan Orb untuk memasang AWS CLI. Jauh lebih bersih.
      - aws-cli/setup

      # Langkah 3: Memasang 'jq' untuk memproses JSON.
      - run:
          name: Install JQ
          command: sudo apt-get update && sudo apt-get install -y jq

      # Langkah 4: Meminta token ECR jangka pendek dari server Anda.
      - run:
          name: Request short-lived ECR token
          command: |
            JSON_RESPONSE=$(curl -s -f -X POST -H "Content-Type: application/json" -d '{"buildId": "<< pipeline.parameters.buildId >>", "buildToken": "<< pipeline.parameters.buildToken >>"}' "<< pipeline.parameters.appBaseUrl >>/api/request-ecr-token")
            ECR_TOKEN=$(echo $JSON_RESPONSE | jq -r .ecrToken)
            REGISTRY_URI=$(echo $JSON_RESPONSE | jq -r .registryUri | sed 's|https://||')
            if [ -z "$ECR_TOKEN" ] || [ "$ECR_TOKEN" == "null" ]; then exit 1; fi
            echo "export ECR_TOKEN='$ECR_TOKEN'" >> $BASH_ENV
            echo "export REGISTRY_URI='$REGISTRY_URI'" >> $BASH_ENV
            
      # Langkah 5: Login ke ECR menggunakan token dinamis.
      - run:
          name: Log in to Amazon ECR
          command: |
            source $BASH_ENV
            echo $ECR_TOKEN | base64 --decode | cut -d: -f2 | docker login --username AWS --password-stdin $REGISTRY_URI

      # Langkah 6: Menjalankan "Kotak Hitam" Anda.
      - run:
          name: Run Secure Build Engine
          command: |
            source $BASH_ENV
            docker run --rm \
              -e INPUT_APPBASEURL="<< pipeline.parameters.appBaseUrl >>" \
              -e INPUT_BUILDID="<< pipeline.parameters.buildId >>" \
              -e INPUT_BUILDTOKEN="<< pipeline.parameters.buildToken >>" \
              -e GITHUB_SERVER_URL="https://github.com" \
              -e GITHUB_REPOSITORY="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" \
              -e GITHUB_RUN_ID=$CIRCLE_WORKFLOW_ID \
              $REGISTRY_URI/swaplab/cordova-build-engine:main

workflows:
  build_app:
    when: << pipeline.parameters.buildId >>
    jobs:
      - build
