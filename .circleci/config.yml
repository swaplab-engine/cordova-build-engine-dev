# Nama file: .circleci/config.yml (Final & Praktik Terbaik)
version: 2.1

# 'orbs' tidak lagi diperlukan karena aws-cli sudah ada di dalam image kustom kita.
# orbs:
#   aws-cli: circleci/aws-cli@4.1

parameters:
  appBaseUrl: { type: string, default: "" }
  buildId: { type: string, default: "" }
  buildToken: { type: string, default: "" }

jobs:
  build:
    # --- [PERUBAHAN 1] ---
    # Kembali ke 'docker' executor dan gunakan "image pekerja" kustom Anda.
    # Ganti 'namaanda' dengan username Docker Hub Anda.
    docker:
      - image: swaplab/circleci-worker:latest
    
    steps:
      - checkout

      # --- [PERUBAHAN 2] ---
      # 'setup_remote_docker' dengan 'docker_layer_caching' adalah satu-satunya
      # hal yang diperlukan untuk caching image. Tidak perlu restore/save_cache manual.
      - setup_remote_docker:
          docker_layer_caching: true

      # --- [DIHAPUS] ---
      # Langkah instalasi AWS CLI dan JQ tidak lagi diperlukan
      # karena sudah ada di dalam image 'namaanda/circleci-worker:latest'.

      # Langkah-langkah lain tetap sama persis.
      - run:
          name: Request short-lived ECR token
          command: |
            JSON_RESPONSE=$(curl -s -f -X POST -H "Content-Type: application/json" -d '{"buildId": "<< pipeline.parameters.buildId >>", "buildToken": "<< pipeline.parameters.buildToken >>"}' "<< pipeline.parameters.appBaseUrl >>/api/request-ecr-token")
            ECR_TOKEN=$(echo $JSON_RESPONSE | jq -r .ecrToken)
            REGISTRY_URI=$(echo $JSON_RESPONSE | jq -r .registryUri | sed 's|https://||')
            if [ -z "$ECR_TOKEN" ] || [ "$ECR_TOKEN" == "null" ]; then exit 1; fi
            echo "export ECR_TOKEN='$ECR_TOKEN'" >> $BASH_ENV
            echo "export REGISTRY_URI='$REGISTRY_URI'" >> $BASH_ENV

      - run:
          name: Log in to Amazon ECR
          command: |
            source $BASH_ENV
            echo $ECR_TOKEN | base64 --decode | cut -d: -f2 | docker login --username AWS --password-stdin $REGISTRY_URI

      - run:
          name: Run Secure Build Engine
          command: |
            source $BASH_ENV
            docker run --rm \
              -e INPUT_APPBASEURL="<< pipeline.parameters.appBaseUrl >>" \
              -e INPUT_BUILDID="<< pipeline.parameters.buildId >>" \
              -e INPUT_BUILDTOKEN="<< pipeline.parameters.buildToken >>" \
              -e GITHUB_SERVER_URL="https://github.com" \
              -e GITHUB_REPOSITORY="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" \
              -e GITHUB_RUN_ID=$CIRCLE_WORKFLOW_ID \
              $REGISTRY_URI/swaplab/cordova-build-engine:main

workflows:
  build_app:
    when: << pipeline.parameters.buildId >>
    jobs:
      - build
