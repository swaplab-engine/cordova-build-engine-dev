version: 2.1

parameters:
  userId:
    type: string
    default: ""
  buildId:
    type: string
    default: ""
  projectUrl:
    type: string
    default: ""
  appBaseUrl:
    type: string
    default: ""
  buildType:
    type: string
    default: "debug-apk"
  keystoreUrl:
    type: string
    default: ""
  keystorePassword:
    type: string
    default: ""
  keyAlias:
    type: string
    default: ""
  keyPassword:
    type: string
    default: ""
  timeoutMinutes:
    type: integer
    default: 8

jobs:
  build:
    docker:
      - image: cimg/android:2024.07.1

    working_directory: ~/project

    environment:
      USER_ID: << pipeline.parameters.userId >>
      BUILD_ID: << pipeline.parameters.buildId >>
      APP_BASE_URL: << pipeline.parameters.appBaseUrl >>
      BUILD_TYPE: << pipeline.parameters.buildType >>

    steps:
      - run:
          name: Record start time
          command: echo 'export START_TIME=$(date +%s)' >> $BASH_ENV

      - run:
          name: Report Build In Progress
          command: |
            curl --fail -X POST \
              -H "Content-Type: application/json" \
              -H "X-Build-Secret: $WEBHOOK_SECRET" \
              -d '{
                "buildId": "<< pipeline.parameters.buildId >>",
                "userId": "<< pipeline.parameters.userId >>",
                "status": "in_progress"
              }' \
              "<< pipeline.parameters.appBaseUrl >>/api/github-webhook"

      - restore_cache:
          keys:
            - nvm-v1-{{ checksum "package.json" }}
            - gradle-cache-v1-{{ checksum "cordova-project/platforms/android/app/build.gradle" }}

      - run:
          name: Install Node.js (via nvm)
          shell: /bin/bash -eo pipefail
          command: |
            set -eu
            echo "=== debug system info ==="
            whoami || true
            if [ -f /etc/os-release ]; then cat /etc/os-release; fi
            echo "Has apt-get? $(command -v apt-get >/dev/null 2>&1 && echo yes || echo no)"
            echo "========================="

            export NVM_DIR="$HOME/.nvm"
            if [ ! -d "$NVM_DIR" ]; then
              curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
            fi

            # load nvm for this shell and install/use node 20
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install 20 || nvm use 20
            nvm alias default 20

            echo "node: $(node -v || echo not-found)"
            echo "npm:  $(npm -v || echo not-found)"

            # Persist NVM loading for subsequent steps
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      - run:
          name: Install Cordova CLI (global) â€” handle npmrc/prefix
          shell: /bin/bash -eo pipefail
          command: |
            set -eu

            # source nvm (in case BASH_ENV not loaded yet)
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

            # Force nvm to ignore any existing npm prefix that conflicts
            # try multiple ways (version could be v20.x.y or just 20)
            nvm use --delete-prefix v20 --silent || nvm use --delete-prefix 20 --silent || true

            # Remove any prefix/globalconfig lines from ~/.npmrc to avoid nvm clashes
            if [ -f "$HOME/.npmrc" ]; then
              sed -i '/^\s*prefix\s*=/d' "$HOME/.npmrc" || true
              sed -i '/^\s*globalconfig\s*=/d' "$HOME/.npmrc" || true
            fi

            # ensure npm is available
            echo "node: $(command -v node || echo not-found) $(node -v || true)"
            echo "npm:  $(command -v npm || echo not-found) $(npm -v || true)"

            # install cordova globally using npm from nvm
            npm install -g cordova --no-audit --no-fund
            echo "cordova: $(command -v cordova || echo not-found) $(cordova -v || true)"

      - save_cache:
          key: nvm-v1-{{ checksum "package.json" }}
          paths:
            - ~/.nvm
            - ~/.npm
            - ~/.cache/npm

      - run:
          name: Download and Unzip Project
          shell: /bin/bash -eo pipefail
          command: |
            curl -L -o cordovaProject.zip "<< pipeline.parameters.projectUrl >>"
            mkdir -p cordova-project
            unzip -o cordovaProject.zip -d cordova-project

      - run:
          name: Prepare Signing Configuration
          shell: /bin/bash -eo pipefail
          command: |
            if [[ "<< pipeline.parameters.buildType >>" == "release-apk" || "<< pipeline.parameters.buildType >>" == "release-aab" ]]; then
              cd cordova-project
              KEYSTORE_URL="<< pipeline.parameters.keystoreUrl >>"
              curl -L -o release.jks "$KEYSTORE_URL"
              PACKAGE_TYPE="apk"
              if [[ "<< pipeline.parameters.buildType >>" == "release-aab" ]]; then
                PACKAGE_TYPE="bundle"
              fi
              printf "{ \"android\": { \"release\": { \"keystore\": \"release.jks\", \"storePassword\": \"<< pipeline.parameters.keystorePassword >>\", \"alias\": \"<< pipeline.parameters.keyAlias >>\", \"password\": \"<< pipeline.parameters.keyPassword >>\", \"packageType\": \"%s\" } } }" "$PACKAGE_TYPE" > build.json
            fi

      - run:
          name: Install Dependencies and Build Project
          shell: /bin/bash -eo pipefail
          no_output_timeout: << pipeline.parameters.timeoutMinutes >>m
          command: |
            set -eu
            # ensure nvm is loaded
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm use 20 || true

            cd cordova-project

            echo "--- Installing Project Dependencies ---"
            npm install

            echo "--- Adding Android Platform ---"
            cordova platform add android

            echo "--- Starting Cordova Build ---"
            if [[ "$BUILD_TYPE" == "debug-apk" ]]; then
              cordova build android --debug -- --gradleArg=--no-daemon
            else
              cordova build android --release --buildConfig=build.json -- --gradleArg=--no-daemon
            fi
            echo "--- Cordova Build Finished ---"

      - save_cache:
          key: gradle-cache-v1-{{ checksum "cordova-project/platforms/android/app/build.gradle" }}
          paths:
            - /home/circleci/.gradle/caches
            - /home/circleci/.gradle/wrapper

      - run:
          name: Upload Build File and Report Success
          when: on_success
          shell: /bin/bash -eo pipefail
          command: |
            ARTIFACT_PATH=""
            if [[ "$BUILD_TYPE" == "release-aab" ]]; then
              ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/bundle/release -name "*.aab" | head -n 1)
            elif [[ "$BUILD_TYPE" == "release-apk" ]]; then
              ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
            else
              ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/apk/debug -name "*.apk" | head -n 1)
            fi

            if [ -z "$ARTIFACT_PATH" ]; then echo "Build artifact not found!"; exit 1; fi

            UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" --fail -X POST \
              -F "buildFile=@$ARTIFACT_PATH" \
              -F "buildId=$BUILD_ID" \
              -F "buildType=$BUILD_TYPE" \
              -H "X-Build-Secret: $WEBHOOK_SECRET" \
              "$APP_BASE_URL/upload-result/$USER_ID")

            HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
            DOWNLOAD_URL=$(echo "$UPLOAD_RESPONSE" | sed '$d')

            if [[ "$HTTP_CODE" != "200" ]]; then echo "Gagal upload. Kode: $HTTP_CODE"; exit 1; fi

            end_time=$(date +%s)
            duration=$((end_time - START_TIME))

            curl --fail -X POST \
              -H "Content-Type: application/json" \
              -H "X-Build-Secret: $WEBHOOK_SECRET" \
              -d '{
                "buildId": "'"$BUILD_ID"'", "userId": "'"$USER_ID"'",
                "status": "complete", "durationSeconds": "'"$duration"'", "downloadUrl": "'"$DOWNLOAD_URL"'"
              }' \
              "$APP_BASE_URL/api/github-webhook"

      - run:
          name: Upload Log File and Report Failure
          when: on_fail
          shell: /bin/bash -eo pipefail
          command: |
            LOG_CONTENT="build_log.txt"
            if [ ! -f "$LOG_CONTENT" ]; then
                echo "Build failed before generating a detailed log. Please check the CircleCI logs for errors." > $LOG_CONTENT
            fi

            UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
              -F "logFile=@$LOG_CONTENT" \
              -F "buildId=$BUILD_ID" \
              -H "X-Build-Secret: $WEBHOOK_SECRET" \
              "$APP_BASE_URL/upload-log/$USER_ID")

            HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
            LOG_URL=$(echo "$UPLOAD_RESPONSE" | sed '$d')

            if [[ "$HTTP_CODE" != "200" ]]; then LOG_URL=""; fi

            end_time=$(date +%s)
            duration=$((end_time - START_TIME))

            curl --fail -X POST \
              -H "Content-Type: application/json" \
              -H "X-Build-Secret: $WEBHOOK_SECRET" \
              -d '{
                "buildId": "'"$BUILD_ID"'", "userId": "'"$USER_ID"'",
                "status": "failed", "durationSeconds": "'"$duration"'", "logUrl": "'"$LOG_URL"'"
              }' \
              "$APP_BASE_URL/api/github-webhook"

workflows:
  build_cordova_app:
    when: << pipeline.parameters.buildId >>
    jobs:
      - build
