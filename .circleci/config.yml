version: 2.1

parameters:
  userId:
    type: string
    default: ""
  buildId:
    type: string
    default: ""
  projectUrl:
    type: string
    default: ""
  appBaseUrl:
    type: string
    default: ""
  buildType:
    type: string
    default: "debug-apk"
  keystoreUrl:
    type: string
    default: ""
  keystorePassword:
    type: string
    default: ""
  keyAlias:
    type: string
    default: ""
  keyPassword:
    type: string
    default: ""
  timeoutMinutes:
    type: integer
    default: 8

jobs:
  build:
    # Versi image sudah cukup spesifik, ini bagus untuk konsistensi.
    docker:
      - image: cimg/android:2024.07.1
    
    working_directory: ~/project

    environment:
      USER_ID: << pipeline.parameters.userId >>
      BUILD_ID: << pipeline.parameters.buildId >>
      APP_BASE_URL: << pipeline.parameters.appBaseUrl >>
      BUILD_TYPE: << pipeline.parameters.buildType >>

    steps:
      # Langkah 1: Mengambil kode dari repositori
      - checkout

      # Langkah 2: Menyiapkan Node.js dan Cordova CLI (dengan cache)
      - restore_cache:
          name: Restore Cordova CLI Cache
          keys:
            - cordova-cli-v1
      - run:
          name: Install Node.js v20.19.4 and Cordova CLI
          shell: /bin/bash --login -eo pipefail
          command: |
            # Mengunci versi Node.js
            nvm install 20.19.4
            nvm alias default 20.19.4
            echo "node version: $(node -v)"
            echo "npm version: $(npm -v)"
            # Install Cordova hanya jika belum ada di cache
            if ! command -v cordova &> /dev/null
            then
                echo "Cordova not found, installing..."
                npm install -g cordova
            else
                echo "Cordova found in cache."
            fi
            echo "cordova version: $(cordova -v)"
      - save_cache:
          name: Save Cordova CLI Cache
          key: cordova-cli-v1
          paths:
            - /home/circleci/.npm-global

      # Langkah 3: Mengunduh dan menyiapkan proyek
      - run:
          name: Download and Unzip Project
          command: |
            curl -L -o cordovaProject.zip "<< pipeline.parameters.projectUrl >>"
            mkdir cordova-project
            unzip -o cordovaProject.zip -d cordova-project

      # Langkah 4: Menyiapkan konfigurasi signing (jika perlu)
      - run:
          name: Prepare Signing Configuration
          command: |
            if [[ "<< pipeline.parameters.buildType >>" == "release-apk" || "<< pipeline.parameters.buildType >>" == "release-aab" ]]; then
              cd cordova-project
              curl -L -o release.jks "<< pipeline.parameters.keystoreUrl >>"
              PACKAGE_TYPE="apk"
              if [[ "<< pipeline.parameters.buildType >>" == "release-aab" ]]; then
                PACKAGE_TYPE="bundle"
              fi
              printf "{ \"android\": { \"release\": { \"keystore\": \"release.jks\", \"storePassword\": \"<< pipeline.parameters.keystorePassword >>\", \"alias\": \"<< pipeline.parameters.keyAlias >>\", \"password\": \"<< pipeline.parameters.keyPassword >>\", \"packageType\": \"%s\" } } }" "$PACKAGE_TYPE" > build.json
            fi
      
      # Langkah 5: Memasang dependensi proyek & build (dengan cache)
      - restore_cache:
          name: Restore Project Dependencies Cache
          keys:
            - project-deps-v1-{{ checksum "cordova-project/package-lock.json" }}
      - restore_cache:
          name: Restore Gradle Cache
          keys:
            - gradle-deps-v1-{{ checksum "cordova-project/package-lock.json" }}

      - run:
          name: Install Dependencies and Build Project
          shell: /bin/bash --login -eo pipefail
          no_output_timeout: << pipeline.parameters.timeoutMinutes >>m
          command: |
            cd cordova-project
            
            echo "--- Installing Project Dependencies (npm) ---"
            npm install
            
            echo "--- Adding Android Platform ---"
            cordova platform add android
            
            echo "--- Starting Cordova Build ---"
            if [[ "$BUILD_TYPE" == "debug-apk" ]]; then
              cordova build android --debug -- --gradleArg=--no-daemon
            else
              cordova build android --release --buildConfig=build.json -- --gradleArg=--no-daemon
            fi
            echo "--- Cordova Build Finished ---"
      
      - save_cache:
          name: Save Project Dependencies Cache
          key: project-deps-v1-{{ checksum "cordova-project/package-lock.json" }}
          paths:
            - cordova-project/node_modules
      - save_cache:
          name: Save Gradle Cache
          key: gradle-deps-v1-{{ checksum "cordova-project/package-lock.json" }}
          paths:
            - /home/circleci/.gradle/caches
            - /home/circleci/.gradle/wrapper

      # Langkah 6 & 7: Upload hasil (tidak ada perubahan)
      - run:
          name: Upload Build File and Report Success
          when: on_success
          command: |
            ARTIFACT_PATH=""
            if [[ "$BUILD_TYPE" == "release-aab" ]]; then
              ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/bundle/release -name "*.aab" | head -n 1)
            elif [[ "$BUILD_TYPE" == "release-apk" ]]; then
              ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
            else
              ARTIFACT_PATH=$(find cordova-project/platforms/android/app/build/outputs/apk/debug -name "*.apk" | head -n 1)
            fi
            
            if [ -z "$ARTIFACT_PATH" ]; then echo "Build artifact not found!"; exit 1; fi

            UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" --fail -X POST \
              -F "buildFile=@$ARTIFACT_PATH" \
              -F "buildId=$BUILD_ID" \
              -F "buildType=$BUILD_TYPE" \
              -H "X-Build-Secret: $WEBHOOK_SECRET" \
              "$APP_BASE_URL/upload-result/$USER_ID")
            
            HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
            DOWNLOAD_URL=$(echo "$UPLOAD_RESPONSE" | sed '$d')

            if [[ "$HTTP_CODE" != "200" ]]; then echo "Gagal upload. Kode: $HTTP_CODE"; exit 1; fi

            end_time=$(date +%s)
            duration=$((end_time - START_TIME))

            curl --fail -X POST \
              -H "Content-Type: application/json" \
              -H "X-Build-Secret: $WEBHOOK_SECRET" \
              -d '{
                "buildId": "'"$BUILD_ID"'", "userId": "'"$USER_ID"'",
                "status": "complete", "durationSeconds": "'"$duration"'", "downloadUrl": "'"$DOWNLOAD_URL"'"
              }' \
              "$APP_BASE_URL/api/github-webhook"

      - run:
          name: Upload Log File and Report Failure
          when: on_fail
          command: |
            LOG_CONTENT="build_log.txt"
            if [ ! -f "$LOG_CONTENT" ]; then
                echo "Build failed before generating a detailed log. Please check the CircleCI logs for errors." > $LOG_CONTENT
            fi
            
            UPLOAD_RESPONSE=$(curl -s -w "\n%{http_code}" --fail -X POST \
              -F "logFile=@$LOG_CONTENT" \
              -F "buildId=$BUILD_ID" \
              -H "X-Build-Secret: $WEBHOOK_SECRET" \
              "$APP_BASE_URL/upload-log/$USER_ID")
            
            HTTP_CODE=$(echo "$UPLOAD_RESPONSE" | tail -n1)
            LOG_URL=$(echo "$UPLOAD_RESPONSE" | sed '$d')

            if [[ "$HTTP_CODE" != "200" ]]; then LOG_URL=""; fi

            end_time=$(date +%s)
            duration=$((end_time - START_TIME))

            curl --fail -X POST \
              -H "Content-Type: application/json" \
              -H "X-Build-Secret: $WEBHOOK_SECRET" \
              -d '{
                "buildId": "'"$BUILD_ID"'", "userId": "'"$USER_ID"'",
                "status": "failed", "durationSeconds": "'"$duration"'", "logUrl": "'"$LOG_URL"'"
              }' \
              "$APP_BASE_URL/api/github-webhook"

workflows:
  build_cordova_app:
    when: << pipeline.parameters.buildId >>
    jobs:
      - build
