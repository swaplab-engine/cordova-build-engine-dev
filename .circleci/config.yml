# Nama file: .circleci/config.yml
# Pendekatan: Menggunakan 'machine' executor untuk stabilitas
# dan caching manual 'docker save/load' untuk efisiensi.
version: 2.1

# Menggunakan Orb resmi dari CircleCI untuk mengelola instalasi AWS CLI.
orbs:
  aws-cli: circleci/aws-cli@4.1

# Parameter yang diterima dari server.js saat build dipicu.
parameters:
  appBaseUrl: { type: string, default: "" }
  buildId: { type: string, default: "" }
  buildToken: { type: string, default: "" }

jobs:
  build:
    # Menggunakan machine executor dengan image Ubuntu LTS yang sudah termasuk Docker.
    machine:
      image: ubuntu-2204:current
    
    steps:
      - checkout

      # Memasang perangkat lunak yang dibutuhkan.
      - aws-cli/setup
      - run:
          name: Install JQ
          command: |
            sudo apt-get update
            sudo apt-get install -y jq

      # Memulihkan cache Docker dari build sebelumnya.
      - restore_cache:
          keys:
            - v1-docker-image-cache

      # Memuat image Docker dari cache jika file-nya ada.
      - run:
          name: Load Docker Image from Cache
          command: |
            if [ -f /tmp/caches/docker-image.tar ]; then
              echo "✅ Docker cache found, loading image..."
              docker load < /tmp/caches/docker-image.tar
            else
              echo "⚠️ No Docker cache found, will perform a full pull."
            fi

      # Meminta token akses sementara ke ECR dari server Anda.
      - run:
          name: Request short-lived ECR token
          command: |
            JSON_RESPONSE=$(curl -s -f -X POST -H "Content-Type: application/json" -d '{"buildId": "<< pipeline.parameters.buildId >>", "buildToken": "<< pipeline.parameters.buildToken >>"}' "<< pipeline.parameters.appBaseUrl >>/api/request-ecr-token")
            ECR_TOKEN=$(echo $JSON_RESPONSE | jq -r .ecrToken)
            REGISTRY_URI=$(echo $JSON_RESPONSE | jq -r .registryUri | sed 's|https://||')
            if [ -z "$ECR_TOKEN" ] || [ "$ECR_TOKEN" == "null" ]; then exit 1; fi
            echo "export ECR_TOKEN='$ECR_TOKEN'" >> $BASH_ENV
            echo "export REGISTRY_URI='$REGISTRY_URI'" >> $BASH_ENV

      # Login ke Amazon ECR menggunakan token sementara.
      - run:
          name: Log in to Amazon ECR
          command: |
            source $BASH_ENV
            echo $ECR_TOKEN | base64 --decode | cut -d: -f2 | docker login --username AWS --password-stdin $REGISTRY_URI

      # Menjalankan "kotak hitam" Anda.
      # Docker pertama akan mencoba mencari image secara lokal (dari cache yang di-load).
      # Jika tidak ada, baru ia akan melakukan 'pull' dari ECR.
      - run:
          name: Run Secure Build Engine
          command: |
            source $BASH_ENV
            docker run --rm \
              -e INPUT_APPBASEURL="<< pipeline.parameters.appBaseUrl >>" \
              -e INPUT_BUILDID="<< pipeline.parameters.buildId >>" \
              -e INPUT_BUILDTOKEN="<< pipeline.parameters.buildToken >>" \
              -e GITHUB_SERVER_URL="https://github.com" \
              -e GITHUB_REPOSITORY="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" \
              -e GITHUB_RUN_ID=$CIRCLE_WORKFLOW_ID \
              $REGISTRY_URI/swaplab/cordova-build-engine:main

      # Menyimpan image Docker ke dalam file cache untuk build berikutnya.
      - run:
          name: Save Docker Image to Cache
          command: |
            mkdir -p /tmp/caches
            docker save $REGISTRY_URI/swaplab/cordova-build-engine:main > /tmp/caches/docker-image.tar

      - save_cache:
          key: v1-docker-image-cache
          paths:
            - /tmp/caches

# Workflow hanya akan berjalan jika dipicu oleh API (memiliki 'buildId').
workflows:
  build_app:
    when: << pipeline.parameters.buildId >>
    jobs:
      - build
