# Nama file: .circleci/config.yml (Final dengan Caching Stabil)
version: 2.1

parameters:
  appBaseUrl: { type: string, default: "" }
  buildId: { type: string, default: "" }
  buildToken: { type: string, default: "" }

jobs:
  build:
    machine:
      image: ubuntu-2204:current
    
    steps:
      - checkout

      # === BLOK CACHING (GABUNGAN) ===
      # Memulihkan cache untuk Docker Image DAN Gradle.
      - restore_cache:
          keys:
            - v1-build-cache-{{ .Branch }} # Mencoba cache spesifik untuk branch
            - v1-build-cache-           # Fallback ke cache terbaru

      - run:
          name: Load Docker Image from Cache
          command: |
            if [ -f /tmp/caches/docker-image.tar ]; then
              echo "✅ Cache Image Docker ditemukan, memuat..."
              docker load < /tmp/caches/docker-image.tar
            else
              echo "⚠️ Cache Image Docker tidak ditemukan."
            fi

      # === AKHIR BLOK CACHING ===

      # Langkah-langkah lain (Install tools, request token, login) tetap sama.
      - run:
          name: Install Dependencies (jq, aws-cli)
          command: |
            sudo apt-get update && sudo apt-get install -y jq
            # Menggunakan Orb akan lebih baik, tapi ini juga berfungsi
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip && sudo ./aws/install

      - run:
          name: Request short-lived ECR token
          # ... (tidak berubah)
          command: |
            JSON_RESPONSE=$(curl -s -f -X POST -H "Content-Type: application/json" -d '{"buildId": "<< pipeline.parameters.buildId >>", "buildToken": "<< pipeline.parameters.buildToken >>"}' "<< pipeline.parameters.appBaseUrl >>/api/request-ecr-token")
            ECR_TOKEN=$(echo $JSON_RESPONSE | jq -r .ecrToken)
            REGISTRY_URI=$(echo $JSON_RESPONSE | jq -r .registryUri | sed 's|https://||')
            if [ -z "$ECR_TOKEN" ] || [ "$ECR_TOKEN" == "null" ]; then exit 1; fi
            echo "export ECR_TOKEN='$ECR_TOKEN'" >> $BASH_ENV
            echo "export REGISTRY_URI='$REGISTRY_URI'" >> $BASH_ENV

      - run:
          name: Log in to Amazon ECR
          # ... (tidak berubah)
          command: |
            source $BASH_ENV
            echo $ECR_TOKEN | base64 --decode | cut -d: -f2 | docker login --username AWS --password-stdin $REGISTRY_URI

      - run:
          name: Run Secure Build Engine
          # --- [PERUBAHAN PENTING] ---
          # Kita akan me-mount direktori cache Gradle dari runner ke dalam kontainer.
          command: |
            source $BASH_ENV
            
            # Membuat direktori cache di runner jika belum ada
            mkdir -p /home/circleci/project/.gradle
            
            docker run --rm \
              -e INPUT_APPBASEURL="<< pipeline.parameters.appBaseUrl >>" \
              -e INPUT_BUILDID="<< pipeline.parameters.buildId >>" \
              -e INPUT_BUILDTOKEN="<< pipeline.parameters.buildToken >>" \
              -e GITHUB_SERVER_URL="https://github.com" \
              -e GITHUB_REPOSITORY="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" \
              -e GITHUB_RUN_ID=$CIRCLE_WORKFLOW_ID \
              \
              # Me-mount volume: menghubungkan folder .gradle di runner ke /github/workspace/.gradle di kontainer
              -v /home/circleci/project/.gradle:/github/workspace/.gradle \
              \
              $REGISTRY_URI/swaplab/cordova-build-engine:main

      # === BLOK PENYIMPANAN CACHE (GABUNGAN) ===
      - run:
          name: Save Docker Image to Cache
          command: |
            mkdir -p /tmp/caches
            docker save $REGISTRY_URI/swaplab/cordova-build-engine:main > /tmp/caches/docker-image.tar

      - save_cache:
          key: v1-build-cache-{{ .Branch }}
          paths:
            - /tmp/caches
            - /home/circleci/project/.gradle # <-- Menyimpan cache Gradle juga

workflows:
  build_app:
    when: << pipeline.parameters.buildId >>
    jobs:
      - build
